---
import Layout from '../layouts/Layout.astro';
import LoadingTransition from '../components/LoadingTransition.astro';
---
<LoadingTransition />
<Layout title="TellMe - Feed">
  <!-- Añadir meta tag para asegurar UTF-8 -->
  <meta charset="UTF-8" slot="head"/>
  <div class="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50">
    <!-- Navbar estilo modernizado -->
    <nav class="bg-white/80 backdrop-blur-sm shadow-lg fixed w-full top-0 z-50 border-b border-purple-100">
      <div class="max-w-7xl mx-auto px-4">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <h1 class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-indigo-600">TellMe</h1>
            <div class="ml-6 relative">
              <input 
                type="text" 
                placeholder="Buscar en TellMe" 
                class="bg-purple-50 rounded-full py-2 pl-10 pr-4 text-sm w-64 focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all"
              >
              <svg class="h-4 w-4 text-purple-400 absolute left-3 top-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
          
          <div class="flex items-center space-x-3">
            <a href="/profile" class="p-2 rounded-full hover:bg-purple-100 transition-colors relative">
              <span class="sr-only">Perfil</span>
              <div class="relative h-8 w-8 rounded-full overflow-hidden">
                <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials text-xs">
                  TM
                </div>
              </div>
              <span class="absolute top-0 right-0 h-2 w-2 bg-green-400 rounded-full"></span>
            </a>
            <!-- Botón de notificaciones con indicador de solicitudes -->
            <a href="#" id="notifications-btn" class="p-2 rounded-full hover:bg-purple-100 transition-colors relative">
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
              </svg>
              <!-- Indicador de solicitudes pendientes -->
              <span id="request-indicator" class="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center font-semibold hidden">0</span>
            </a>
            <button id="logoutBtn" class="p-2 rounded-full hover:bg-purple-100 transition-colors">
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content con 3 columnas -->
    <main class="pt-20 pb-8">
      <div class="max-w-7xl mx-auto px-4 flex">
        <!-- Barra lateral izquierda -->
        <div class="hidden lg:block w-1/4 pr-4">
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 mb-4 border border-purple-100">
            <ul class="space-y-2">
              <li>
                <a href="/profile" class="flex items-center p-3 rounded-lg hover:bg-purple-50 transition-colors">
                  <div class="relative h-10 w-10 rounded-full overflow-hidden flex-shrink-0 mr-3 shadow-md">
                    <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                    <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials">
                      TM
                    </div>
                  </div>
                  <span class="text-purple-900 font-medium">Mi Perfil</span>
                </a>
              </li>
              <li>
                <a href="#" class="flex items-center p-3 rounded-lg hover:bg-purple-50 transition-colors">
                  <svg class="h-10 w-10 text-purple-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  <span class="text-purple-900 font-medium">Amigos</span>
                </a>
              </li>            
            </ul>
          </div>
        </div>
        
        <!-- Contenido central -->
        <div class="w-full lg:w-2/4 px-0 lg:px-4">
        <!-- Create Post -->
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 mb-6 border border-purple-100">
          <div class="flex items-center space-x-4 mb-4">
              <div class="relative h-12 w-12 rounded-full overflow-hidden shadow-md">
                <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials">
                  TM
                </div>
              </div>
              <button class="w-full px-4 py-3 border border-purple-200 rounded-full bg-purple-50 text-left text-gray-500 hover:bg-purple-100 transition-colors text-sm" id="openPostModal">
                Que hay de nuevo?
            </button>
          </div>
          <div class="flex justify-between items-center border-t border-purple-100 pt-4">
              <button class="flex items-center px-3 py-2 rounded-lg hover:bg-purple-50 transition-colors text-sm" id="uploadMediaBtn">
                <svg class="h-6 w-6 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Foto/Video
            </button>
              <button class="flex items-center px-3 py-2 rounded-lg hover:bg-purple-50 transition-colors text-sm">
                <svg class="h-6 w-6 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Sentimiento
            </button>
          </div>
        </div>

        <!-- Posts Feed -->
        <div id="postsContainer" class="space-y-6">
          <!-- Los posts se cargarán dinámicamente aquí -->
            <div id="loadingPosts" class="text-center py-8 bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-purple-100">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-600"></div>
              <p class="mt-2 text-purple-600">Cargando publicaciones...</p>
          </div>
        </div>
      </div>
        
        <!-- Barra lateral derecha -->
        <div class="hidden lg:block w-1/4 pl-4">
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 mb-4 border border-purple-100">
        <div class="flex justify-between items-center mb-4">
              <h3 class="font-semibold text-purple-900">Contactos</h3>
              <button id="toggleFriendMode" class="text-xs text-purple-600 hover:text-purple-800">
                Ver todas las publicaciones
              </button>
            </div>
            
            <!-- Buscador de usuarios -->
            <div class="mb-4 relative">
              <div class="relative">
                <input 
                  type="text" 
                  id="searchUsers"
                  placeholder="Buscar usuarios..." 
                  class="w-full bg-purple-50 rounded-lg py-2 pl-8 pr-4 text-sm focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all"
                >
                <svg class="h-4 w-4 text-purple-400 absolute left-2 top-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              
              <!-- Resultados de búsqueda (inicialmente ocultos) -->
              <div id="searchResults" class="absolute z-10 mt-1 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-60 overflow-y-auto hidden">
                <!-- Los resultados se cargarán dinámicamente aquí -->
              </div>
            </div>
            
            <!-- Solicitudes de amistad (Movidas arriba para mayor visibilidad) -->
            <div id="friendRequestsContainer" class="mb-6">
              <!-- Las solicitudes se cargarán dinámicamente aquí -->
            </div>
            
            <!-- Lista de amigos -->
            <ul class="space-y-4">
              <!-- Los amigos se cargarán dinámicamente aquí -->
              <li class="text-center text-gray-500 py-2">
                Cargando contactos...
              </li>
            </ul>
            
            <!-- Antiguo contenedor de solicitudes, ahora eliminado -->
          </div>
        </div>
      </div>
    </main>

    <!-- Modal para crear post estilo Facebook -->
    <div id="postModal" class="fixed inset-0 bg-black/60 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-xl w-full max-w-lg mx-4 shadow-xl">
        <div class="flex justify-between items-center p-4 border-b border-purple-100">
          <h3 class="text-xl font-semibold text-purple-900">Crear publicacion</h3>
          <button id="closePostModal" class="text-gray-500 hover:text-gray-700">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="p-4">
          <div class="flex items-center space-x-3 mb-4">
            <div class="relative h-10 w-10 rounded-full overflow-hidden">
              <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
              <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials text-sm">
                TM
              </div>
            </div>
            <div>
              <p class="font-medium text-purple-900" id="modalUserName">Tu Nombre</p>
              <div class="flex items-center text-xs bg-purple-50 rounded px-2 py-1 mt-1">
                <svg class="h-3 w-3 mr-1 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064" />
                </svg>
                <span>Publico</span>
                <svg class="h-3 w-3 ml-1 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>
          </div>
          <textarea id="postContent" class="w-full p-3 min-h-[120px] text-gray-800 text-lg focus:outline-none" placeholder="Que hay por aqui?"></textarea>
        <div id="mediaPreview" class="mb-4 hidden">
          <div class="relative">
              <img id="previewImage" src="" alt="Vista previa" class="max-h-60 rounded-lg mx-auto">
              <button id="removeMediaBtn" class="absolute top-2 right-2 bg-gray-800 text-white rounded-full p-1 hover:bg-gray-700 transition-colors">
              <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
          <div class="bg-gray-100 rounded-lg p-3 flex items-center justify-between mb-4">
            <div class="flex space-x-2">
              <button id="addMediaBtn" class="text-gray-500 hover:bg-gray-200 p-2 rounded-full transition-colors">
                <svg class="h-6 w-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </button>
              <button class="text-gray-500 hover:bg-gray-200 p-2 rounded-full transition-colors">
                <svg class="h-6 w-6 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </button>
              <button class="text-gray-500 hover:bg-gray-200 p-2 rounded-full transition-colors">
                <svg class="h-6 w-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </button>
            </div>
          </div>
          <button id="submitPostBtn" class="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
            Publicar
          </button>
        </div>
      </div>
    </div>

    <!-- Modal para comentarios -->
    <div id="commentModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-2xl p-6 w-full max-w-lg mx-4 shadow-xl">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-semibold text-gray-800">Comentarios</h3>
          <button id="closeCommentModal" class="text-gray-500 hover:text-gray-700">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div id="commentsList" class="max-h-80 overflow-y-auto mb-4">
          <!-- Los comentarios se cargarán dinámicamente aquí -->
        </div>
        <div class="flex">
          <input type="text" id="commentInput" class="flex-1 p-3 border border-gray-200 rounded-l-xl focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Escribe un comentario...">
          <button id="submitCommentBtn" class="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-r-xl hover:opacity-90 transition-colors">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Mejoras de accesibilidad */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
</style>

<script>
  // @ts-ignore
  import { auth, posts, utils, friends } from '../utils/api.js';

  // Verificar si el usuario está autenticado
  if (!utils.isAuthenticated()) {
    window.location.href = '/';
  }

  // Elementos del DOM
  const logoutBtn = document.getElementById('logoutBtn') as HTMLButtonElement;
  const postsContainer = document.getElementById('postsContainer') as HTMLDivElement;
  const loadingPosts = document.getElementById('loadingPosts') as HTMLDivElement;
  const postModal = document.getElementById('postModal') as HTMLDivElement;
  const openPostModal = document.getElementById('openPostModal') as HTMLButtonElement;
  const closePostModal = document.getElementById('closePostModal') as HTMLButtonElement;
  const postContent = document.getElementById('postContent') as HTMLTextAreaElement;
  const submitPostBtn = document.getElementById('submitPostBtn') as HTMLButtonElement;
  const addMediaBtn = document.getElementById('addMediaBtn') as HTMLButtonElement;
  const removeMediaBtn = document.getElementById('removeMediaBtn') as HTMLButtonElement;
  const mediaPreview = document.getElementById('mediaPreview') as HTMLDivElement;
  const previewImage = document.getElementById('previewImage') as HTMLImageElement;
  const commentModal = document.getElementById('commentModal') as HTMLDivElement;
  const closeCommentModal = document.getElementById('closeCommentModal') as HTMLButtonElement;
  const commentsList = document.getElementById('commentsList') as HTMLDivElement;
  const commentInput = document.getElementById('commentInput') as HTMLInputElement;
  const submitCommentBtn = document.getElementById('submitCommentBtn') as HTMLButtonElement;
  const userProfileImages = document.querySelectorAll('.user-profile-image') as NodeListOf<HTMLImageElement>;
  const userInitials = document.querySelectorAll('.user-initials') as NodeListOf<HTMLDivElement>;
  
  // Elementos para amigos
  const friendsContainer = document.querySelector('ul.space-y-4') as HTMLUListElement;
  const searchUsersInput = document.getElementById('searchUsers') as HTMLInputElement;
  const searchResults = document.getElementById('searchResults') as HTMLDivElement;
  const friendRequestsContainer = document.getElementById('friendRequestsContainer') as HTMLDivElement;
  const toggleFriendMode = document.getElementById('toggleFriendMode') as HTMLButtonElement;

  // Variable para almacenar el ID del post actual para comentarios
  let currentPostId: string | null = null;
  let selectedMedia: string | null = null;
  let showFriendsPostsOnly = true; // Por defecto, solo mostrar publicaciones de amigos

  // Agregar constante DEBUG_MODE para depuración
  const DEBUG_MODE = window.location.hostname === 'localhost' || window.location.hostname.includes('127.0.0.1');

  // Cargar foto de perfil del usuario actual
  const loadUserProfileImage = async () => {
    try {
      const currentUser = await auth.getCurrentUser();
      
      // Obtener URL base de la API
      const getBaseUrl = () => {
        const isProduction = window.location.hostname !== 'localhost' && !window.location.hostname.includes('127.0.0.1');
        return isProduction ? 'https://api.tellme-app.com' : 'http://localhost:5000';
      };
      
      const baseUrl = getBaseUrl();
      
      // Actualizar todas las imágenes de perfil del usuario
      if (currentUser) {
        let profileImageUrl = currentUser.profilePicture || '';
        
        // Asegurarse de que la URL de la imagen es completa
        if (profileImageUrl && profileImageUrl.startsWith('/uploads/')) {
          profileImageUrl = `${baseUrl}${profileImageUrl}`;
        }
        
        // Si hay una foto de perfil, mostrarla
        if (profileImageUrl) {
          // Actualizar todas las imágenes de perfil
          userProfileImages.forEach(img => {
            img.src = profileImageUrl;
            img.classList.remove('hidden');
          });
          
          // Ocultar los iniciales
          userInitials.forEach(div => {
            div.classList.add('hidden');
          });
        } else {
          // Si no hay foto, mostrar las iniciales
          userProfileImages.forEach(img => {
            img.classList.add('hidden');
          });
          
          // Construir iniciales a partir del nombre (como máximo 2 caracteres)
          const name = currentUser.name || 'Usuario';
          const words = name.split(' ');
          let initials = '';
          
          if (words.length >= 2) {
            // Primera letra del primer nombre + primera letra del segundo nombre/apellido
            initials = words[0].charAt(0) + words[1].charAt(0);
          } else if (words.length === 1) {
            // Primera y segunda letra del único nombre (o solo la primera si el nombre tiene un solo carácter)
            initials = words[0].charAt(0) + (words[0].length > 1 ? words[0].charAt(1) : '');
          } else {
            // Fallback si no hay nombre
            initials = 'U';
          }
          
          userInitials.forEach(div => {
            div.textContent = initials.toUpperCase();
            div.classList.remove('hidden');
          });
        }
        
        // Actualizar el nombre en el modal
        const userNameElement = document.getElementById('modalUserName');
        if (userNameElement) {
          userNameElement.textContent = currentUser.name || 'Usuario';
        }
      }
    } catch (error) {
      console.error('Error al cargar imagen de perfil:', error);
      // Mostrar iniciales como fallback en caso de error
      userProfileImages.forEach(img => {
        img.classList.add('hidden');
      });
      
      userInitials.forEach(div => {
        div.textContent = 'TM';
        div.classList.remove('hidden');
      });
    }
  };
  
  // Cargar foto de perfil al iniciar
  loadUserProfileImage();

  // Cerrar sesión
  logoutBtn?.addEventListener('click', () => {
    auth.logout();
    window.location.href = '/';
  });

  // Abrir modal de creación de post
  openPostModal?.addEventListener('click', () => {
    if (postModal) {
      postModal.classList.remove('hidden');
    }
  });

  // Cerrar modal de creación de post
  closePostModal?.addEventListener('click', () => {
    if (postModal) {
      postModal.classList.add('hidden');
      if (postContent) postContent.value = '';
      if (mediaPreview) mediaPreview.classList.add('hidden');
      selectedMedia = null;
    }
  });

  // Cargar posts
  const loadPosts = async () => {
    try {
      let allPosts;
      try {
        // Intentar cargar posts de amigos primero
        allPosts = await posts.getAll(showFriendsPostsOnly);
      } catch (error) {
        console.warn('Error al cargar posts filtrados por amigos, cargando todos los posts:', error);
        // Si falla, cargar todos los posts (endpoint normal que ya existe)
        allPosts = await posts.getAll(false);
      }
      
      // Ocultar indicador de carga
      if (loadingPosts) {
        loadingPosts.classList.add('hidden');
      }
      
      // Limpiar contenedor de posts
      if (postsContainer) {
        postsContainer.innerHTML = '';
      }
      
      // Si no hay posts, mostrar mensaje
      if (allPosts.length === 0) {
        if (postsContainer) {
          postsContainer.innerHTML = `
            <div class="bg-white rounded-lg shadow-sm p-4 text-center">
              <p class="text-gray-600">${showFriendsPostsOnly ? 
                'No hay publicaciones de tus amigos. ¡Añade amigos para ver sus publicaciones!' : 
                'No hay publicaciones todavía. ¡Sé el primero en publicar!'}</p>
            </div>
          `;
        }
        return;
      }
      
      // Renderizar posts
      allPosts.forEach((post: any) => {
        const postElement = createPostElement(post);
        if (postsContainer && postElement) {
          postsContainer.appendChild(postElement);
        }
      });
    } catch (error) {
      console.error('Error al cargar posts:', error);
      if (loadingPosts) {
        loadingPosts.innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-600">Error al cargar las publicaciones. Por favor, intenta de nuevo.</p>
          </div>
        `;
      }
    }
  };

  // Crear elemento de post
  const createPostElement = (post: any) => {
    const postElement = document.createElement('article');
    postElement.className = 'bg-white backdrop-blur-sm border border-purple-100 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 mb-6 overflow-hidden';
    postElement.dataset.postId = post._id;
    
    // Verificar si el usuario actual dio like
    const currentUserId = utils.getCurrentUserId();
    const userHasLiked = post.likes && post.likes.some((like: any) => 
      like.user === currentUserId || (like.user && like.user._id === currentUserId)
    );
    
    // Formatear fecha
    const postDate = new Date(post.createdAt);
    const formattedDate = formatDate(postDate);
    
    // Obtener URL base de la API
    const getBaseUrl = () => {
      const isProduction = window.location.hostname !== 'localhost' && !window.location.hostname.includes('127.0.0.1');
      return isProduction ? 'https://api.tellme-app.com' : 'http://localhost:5000';
    };
    
    const baseUrl = getBaseUrl();
    
    // Asegurarnos de que la URL de la imagen de perfil sea completa
    let profileImageUrl = post.user.profilePicture || '/images/avatar-placeholder.png';
    if (profileImageUrl && profileImageUrl.startsWith('/uploads/')) {
      profileImageUrl = `${baseUrl}${profileImageUrl}`;
    }
    
    // Crear HTML del post con estilo único
    postElement.innerHTML = `
      <div class="p-5">
        <div class="flex items-center mb-4">
          <div class="relative">
            <img src="${profileImageUrl}" alt="${post.user.name}" class="h-12 w-12 rounded-full object-cover mr-3 border-2 border-purple-300 p-0.5 shadow-md">
            <div class="absolute -bottom-1 -right-1 h-5 w-5 bg-green-400 rounded-full border-2 border-white"></div>
        </div>
          <div class="flex-1">
            <div class="flex items-center">
              <h3 class="font-bold text-purple-900">${post.user.name}</h3>
              <span class="mx-1 text-gray-400">•</span>
              <span class="text-gray-500 text-sm">${formattedDate}</span>
      </div>
            <div class="flex items-center text-xs text-gray-500">
              <svg class="h-3 w-3 mr-1 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064" />
              </svg>
              <span class="font-medium text-purple-500">Público</span>
            </div>
          </div>
          <div class="ml-auto">
            <button class="text-gray-500 hover:bg-purple-100 p-2 rounded-full transition-colors">
              <svg class="h-5 w-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
              </svg>
            </button>
          </div>
        </div>
        <p class="mb-5 text-gray-700 leading-relaxed">${post.content}</p>
      ${post.image ? `
          <div class="mb-4 -mx-5 relative">
            <img src="${post.image.startsWith('/uploads/') ? `${baseUrl}${post.image}` : post.image}" alt="Imagen del post" class="w-full h-auto object-cover rounded-md shadow-inner">
            <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-md pointer-events-none"></div>
        </div>
      ` : ''}
        
        <!-- Contador de reacciones y comentarios -->
        <div class="flex items-center justify-between text-sm text-gray-500 py-3 border-t border-b border-purple-100 my-2">
          <div class="flex items-center">
            <div class="flex -space-x-2 mr-2">
              <img src="${post.likes && post.likes.length > 0 && post.likes[0].user && post.likes[0].user.profilePicture ? 
                (post.likes[0].user.profilePicture.startsWith('/uploads/') ? 
                  `http://localhost:5000${post.likes[0].user.profilePicture}` : post.likes[0].user.profilePicture) 
                : '/images/avatar-placeholder.png'}" 
                alt="Usuario que dio like" 
                class="h-6 w-6 rounded-full object-cover border-2 border-white shadow-sm">
            </div>
            <span class="like-count font-medium text-purple-600">${post.likes ? post.likes.length : 0} me gusta</span>
          </div>
          <div>
            <span class="font-medium text-purple-600">${post.comments ? post.comments.length : 0} comentarios</span>
          </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="flex mt-2 space-x-2">
          <button class="like-btn flex-1 flex items-center justify-center py-2 px-4 rounded-lg transition-all duration-200 ${userHasLiked ? 'bg-purple-100 text-purple-600 font-semibold' : 'hover:bg-purple-50 text-gray-600'}" data-post-id="${post._id}" data-liked="${userHasLiked}">
            <svg class="h-5 w-5 mr-2 ${userHasLiked ? 'text-purple-600' : ''}" fill="${userHasLiked ? 'currentColor' : 'none'}" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
          </svg>
            ${userHasLiked ? 'Me gusta' : 'Me gusta'}
        </button>
          <button class="comment-btn flex-1 flex items-center justify-center py-2 px-4 rounded-lg hover:bg-purple-50 transition-all duration-200 text-gray-600" data-post-id="${post._id}">
            <svg class="h-5 w-5 mr-2 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
            Comentar
          </button>
          <button class="flex-1 flex items-center justify-center py-2 px-4 rounded-lg hover:bg-purple-50 transition-all duration-200 text-gray-600">
            <svg class="h-5 w-5 mr-2 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
            </svg>
            Compartir
        </button>
      </div>
      
        <!-- Sección de comentarios -->
      ${post.comments && post.comments.length > 0 ? `
          <div class="mt-4 pt-3 border-t border-purple-100">
            <!-- Campo de comentario -->
            <div class="flex items-center mb-3">
              <div class="relative">
                <img src="/images/avatar-placeholder.png" id="currentUserAvatar-${post._id}" class="h-10 w-10 rounded-full object-cover mr-3 border-2 border-purple-100 p-0.5">
              </div>
              <div class="flex-1 relative">
                <input type="text" placeholder="Escribe un comentario..." class="w-full bg-purple-50 rounded-full py-2 px-4 text-sm focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all" data-post-id="${post._id}">
                <button class="absolute right-2 top-1/2 transform -translate-y-1/2 text-purple-500 hover:text-purple-700">
                  <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Comentarios más recientes (limitado a 2) -->
          <div class="space-y-3">
            ${post.comments.slice(0, 2).map((comment: any) => {
              const commentDate = new Date(comment.createdAt);
              const formattedCommentDate = formatDate(commentDate);
                
                // Asegurarnos de que la URL de la imagen de perfil del comentarista sea completa
                let commentUserProfilePic = comment.user.profilePicture || '/images/avatar-placeholder.png';
                if (commentUserProfilePic && commentUserProfilePic.startsWith('/uploads/')) {
                  commentUserProfilePic = `http://localhost:5000${commentUserProfilePic}`;
                }
              
              return `
                  <div class="flex items-start group">
                    <img src="${commentUserProfilePic}" alt="${comment.user.name}" class="h-9 w-9 rounded-full object-cover mr-2 flex-shrink-0 border border-purple-100">
                  <div class="flex-1">
                      <div class="bg-purple-50 rounded-2xl px-4 py-2 group-hover:bg-purple-100 transition-colors">
                        <h4 class="font-semibold text-purple-900 text-sm">${comment.user.name}</h4>
                        <p class="text-gray-700 text-sm">${comment.content}</p>
                    </div>
                      <div class="flex items-center mt-1 text-xs text-gray-500 ml-2">
                        <button class="font-medium text-purple-600 hover:text-purple-800 hover:underline">Me gusta</button>
                        <span class="mx-1">•</span>
                        <button class="font-medium text-purple-600 hover:text-purple-800 hover:underline">Responder</button>
                        <span class="mx-1">•</span>
                        <span>${formattedCommentDate}</span>
                      </div>
                  </div>
                </div>
              `;
            }).join('')}
              
            ${post.comments.length > 2 ? `
                <button class="text-sm text-purple-600 hover:text-purple-800 font-medium comment-btn mt-2 transition-colors" data-post-id="${post._id}">
                  Ver los ${post.comments.length - 2} comentarios más
              </button>
            ` : ''}
          </div>
        </div>
        ` : `
          <!-- Campo de comentario cuando no hay comentarios -->
          <div class="mt-4 pt-3 border-t border-purple-100">
            <div class="flex items-center">
              <div class="relative">
                <img src="/images/avatar-placeholder.png" id="currentUserAvatar-${post._id}" class="h-10 w-10 rounded-full object-cover mr-3 border-2 border-purple-100 p-0.5">
              </div>
              <div class="flex-1 relative">
                <input type="text" placeholder="Escribe un comentario..." class="w-full bg-purple-50 rounded-full py-2 px-4 text-sm focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all" data-post-id="${post._id}">
                <button class="absolute right-2 top-1/2 transform -translate-y-1/2 text-purple-500 hover:text-purple-700">
                  <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        `}
      </div>
    `;
    
    // Añadir event listeners para los botones
    const likeBtn = postElement.querySelector('.like-btn') as HTMLButtonElement;
    const commentBtn = postElement.querySelector('.comment-btn') as HTMLButtonElement;
    
    if (likeBtn) {
      likeBtn.addEventListener('click', () => handleLike(post._id, likeBtn));
    }
    
    if (commentBtn) {
      commentBtn.addEventListener('click', () => openCommentModal(post._id));
    }
    
    // Añadir event listener para el botón "Ver más comentarios"
    const viewAllCommentsBtn = postElement.querySelector('button.comment-btn[data-post-id]') as HTMLButtonElement;
    if (viewAllCommentsBtn && viewAllCommentsBtn !== commentBtn) {
      viewAllCommentsBtn.addEventListener('click', () => openCommentModal(post._id));
    }
    
    // Añadir event listener para el campo de comentario
    const commentField = postElement.querySelector('input[data-post-id]') as HTMLInputElement;
    if (commentField) {
      commentField.addEventListener('keydown', async (e) => {
        if (e.key === 'Enter' && commentField.value.trim()) {
          const content = commentField.value.trim();
          commentField.value = '';
          try {
            await posts.comment(post._id, content);
            // Recargar posts
            loadPosts();
          } catch (error) {
            console.error('Error al comentar:', error);
          }
        }
      });
    }
    
    // Cargar imagen de perfil del usuario actual en el campo de comentario
    const loadCurrentUserAvatar = async () => {
      try {
        const currentUser = await auth.getCurrentUser();
        if (currentUser && currentUser.profilePicture) {
          const avatarImg = postElement.querySelector(`#currentUserAvatar-${post._id}`) as HTMLImageElement;
          if (avatarImg) {
            let profileImageUrl = currentUser.profilePicture;
            if (profileImageUrl.startsWith('/uploads/')) {
              profileImageUrl = `http://localhost:5000${profileImageUrl}`;
            }
            avatarImg.src = profileImageUrl;
          }
        }
      } catch (error) {
        console.error('Error al cargar avatar del usuario actual:', error);
      }
    };
    
    // Ejecutar la carga del avatar
    loadCurrentUserAvatar();
    
    return postElement;
  };

  // Formatear fecha
  const formatDate = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) {
      return `Hace ${days} día${days > 1 ? 's' : ''}`;
    } else if (hours > 0) {
      return `Hace ${hours} hora${hours > 1 ? 's' : ''}`;
    } else if (minutes > 0) {
      return `Hace ${minutes} minuto${minutes > 1 ? 's' : ''}`;
    } else {
      return 'Ahora mismo';
    }
  };

  // Manejar like
  const handleLike = async (postId: string, btnElement?: HTMLButtonElement) => {
    try {
      // Realizar la acción de like en el servidor
      await posts.like(postId);
      
      // Actualizar la UI sin recargar todos los posts
      if (btnElement) {
        const isLiked = btnElement.getAttribute('data-liked') === 'true';
        const likeCountEl = btnElement.closest('.p-4')?.querySelector('.like-count');
        const likeCount = likeCountEl ? parseInt(likeCountEl.textContent || '0') : 0;
        
        if (isLiked) {
          // Quitar estilo de like
          btnElement.classList.remove('text-blue-600', 'font-medium');
          btnElement.classList.add('text-gray-600');
          btnElement.setAttribute('data-liked', 'false');
          
          // Actualizar el icono
          const svgIcon = btnElement.querySelector('svg');
          if (svgIcon) {
            svgIcon.classList.remove('text-blue-600');
            svgIcon.setAttribute('fill', 'none');
          }
          
          // Actualizar contador
          if (likeCountEl && likeCount > 0) {
            likeCountEl.textContent = (likeCount - 1).toString();
          }
        } else {
          // Añadir estilo de like
          btnElement.classList.remove('text-gray-600');
          btnElement.classList.add('text-blue-600', 'font-medium');
          btnElement.setAttribute('data-liked', 'true');
          
          // Actualizar el icono
          const svgIcon = btnElement.querySelector('svg');
          if (svgIcon) {
            svgIcon.classList.add('text-blue-600');
            svgIcon.setAttribute('fill', 'currentColor');
          }
          
          // Actualizar contador
          if (likeCountEl) {
            likeCountEl.textContent = (likeCount + 1).toString();
          }
        }
      } else {
        // Si no tenemos el elemento del botón, recargamos todos los posts
      loadPosts();
      }
    } catch (error) {
      console.error('Error al dar like:', error);
    }
  };

  // Abrir modal de comentarios
  const openCommentModal = async (postId: string) => {
    currentPostId = postId;
    if (commentModal) {
      commentModal.classList.remove('hidden');
    }
    
    // Mostrar indicador de carga
    if (commentsList) {
      commentsList.innerHTML = '<p class="text-center text-gray-500">Cargando comentarios...</p>';
    }
    
    try {
      // Obtener el post específico para ver sus comentarios
      const post = await posts.getById(postId);
      
      if (commentsList) {
        if (!post.comments || post.comments.length === 0) {
          commentsList.innerHTML = '<p class="text-center text-gray-500">No hay comentarios todavía. ¡Sé el primero en comentar!</p>';
        } else {
          // Mostrar los comentarios
          commentsList.innerHTML = post.comments.map((comment: any) => {
            const commentDate = new Date(comment.createdAt);
            const formattedDate = formatDate(commentDate);
            
            // Asegurarnos de que la URL de la imagen de perfil del comentarista sea completa
            let commentUserProfilePic = comment.user.profilePicture || '/images/avatar-placeholder.png';
            if (commentUserProfilePic && commentUserProfilePic.startsWith('/uploads/')) {
              commentUserProfilePic = `http://localhost:5000${commentUserProfilePic}`;
            }
            
            return `
              <div class="mb-4 pb-4 border-b border-gray-100">
                <div class="flex items-start space-x-3">
                  <img src="${commentUserProfilePic}" alt="${comment.user.name}" class="h-8 w-8 rounded-full object-cover flex-shrink-0">
                  <div>
                    <div class="flex items-center">
                      <h4 class="font-medium text-gray-800">${comment.user.name}</h4>
                      <span class="ml-2 text-xs text-gray-500">${formattedDate}</span>
                    </div>
                    <p class="text-gray-700 mt-1">${comment.content}</p>
                  </div>
                </div>
              </div>
            `;
          }).join('');
        }
      }
    } catch (error) {
      console.error('Error al cargar comentarios:', error);
      if (commentsList) {
        commentsList.innerHTML = '<p class="text-center text-red-500">Error al cargar los comentarios. Por favor, intenta de nuevo.</p>';
      }
    }
  };

  // Cerrar modal de comentarios
  closeCommentModal?.addEventListener('click', () => {
    if (commentModal) {
      commentModal.classList.add('hidden');
      currentPostId = null;
    }
  });

  // Manejar envío de comentario
  submitCommentBtn?.addEventListener('click', async () => {
    if (!currentPostId || !commentInput) return;
    
    const content = commentInput.value.trim();
    if (!content) return;
    
    try {
      await posts.comment(currentPostId, content);
      commentInput.value = '';
      // Recargar posts para actualizar los comentarios
      loadPosts();
    } catch (error) {
      console.error('Error al comentar:', error);
    }
  });

  // Manejar envío de post
  submitPostBtn?.addEventListener('click', async () => {
    if (!postContent) return;
    
    const content = postContent.value.trim();
    if (!content && !selectedMedia) return;
    
    // Guardar el estado original del botón
    const originalButtonText = submitPostBtn.textContent || 'Publicar';
    
    try {
      // Mostrar indicador de carga
      submitPostBtn.textContent = 'Publicando...';
      submitPostBtn.disabled = true;
      
      // Crear post
      const postData = {
        content,
        image: selectedMedia || null
      };
      
      // Añadir timeout de seguridad para evitar bloqueos indefinidos
      const createPostPromise = posts.create(postData);
      
      // Si la petición tarda más de 10 segundos, mostramos una alerta
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('La publicación está tardando demasiado tiempo. Verifica tu conexión a internet.')), 10000);
      });
      
      // Esperar a que se complete la publicación o se agote el tiempo
      await Promise.race([createPostPromise, timeoutPromise]);
      
      // Cerrar modal y recargar posts
      if (postModal) {
        postModal.classList.add('hidden');
      }
      postContent.value = '';
      if (mediaPreview) mediaPreview.classList.add('hidden');
      selectedMedia = null;
      
      // Recargar posts
      loadPosts();
    } catch (error) {
      console.error('Error al crear post:', error);
      // Extraer mensaje de error de forma segura
      let errorMessage = 'Error en el servidor';
      if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string') {
        errorMessage = error.message;
      }
      alert(`Error al crear la publicación: ${errorMessage}`);
    } finally {
      // Restaurar el estado del botón sin importar el resultado
      submitPostBtn.textContent = originalButtonText;
      submitPostBtn.disabled = false;
    }
  });

  // Manejar selección de media
  addMediaBtn?.addEventListener('click', () => {
    // Crear input de tipo file
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*';
    
    fileInput.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      const file = target.files?.[0];
      if (!file) return;
      
      // Verificar el tamaño del archivo (máximo 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('La imagen es demasiado grande. El tamaño máximo permitido es 5MB. Se redimensionará automáticamente.');
      }
      
      // Verificar el tipo de archivo
      if (!file.type.startsWith('image/')) {
        alert('Solo se permiten archivos de imagen.');
        return;
      }
      
      // Redimensionar y comprimir imagen antes de convertir a Base64
      const img = new Image();
      const reader = new FileReader();
      
      reader.onload = (e) => {
        img.src = e.target?.result as string;
        
        img.onload = () => {
          // Crear un canvas para redimensionar la imagen
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          // Calcular el nuevo tamaño (máximo 1200px en cualquier dimensión)
          let width = img.width;
          let height = img.height;
          const maxDimension = 1200;
          
          if (width > height && width > maxDimension) {
            height = Math.round(height * (maxDimension / width));
            width = maxDimension;
          } else if (height > maxDimension) {
            width = Math.round(width * (maxDimension / height));
            height = maxDimension;
          }
          
          // Establecer dimensiones del canvas
          canvas.width = width;
          canvas.height = height;
          
          // Dibujar la imagen redimensionada
          ctx?.drawImage(img, 0, 0, width, height);
          
          // Obtener la imagen como data URL con calidad reducida (0.7 = 70%)
          try {
            const dataUrl = canvas.toDataURL(file.type, 0.7);
            
            // Mostrar vista previa
        if (previewImage && mediaPreview) {
              previewImage.src = dataUrl;
          mediaPreview.classList.remove('hidden');
        }
            
            // Guardar la imagen procesada
            selectedMedia = dataUrl;
            
            console.log('Imagen procesada correctamente. Tamaño Base64:', dataUrl.length);
          } catch (error) {
            console.error('Error al procesar la imagen:', error);
            alert('Error al procesar la imagen. Intenta con una imagen diferente.');
          }
        };
      };
      
      reader.readAsDataURL(file);
    });
    
    fileInput.click();
  });

  // Manejar eliminación de media
  removeMediaBtn?.addEventListener('click', () => {
    if (mediaPreview) {
      mediaPreview.classList.add('hidden');
    }
    if (previewImage) {
      previewImage.src = '';
    }
    selectedMedia = null;
  });

  // Cargar amigos
  const loadFriends = async () => {
    if (!friendsContainer) return;
    
    try {
      // Obtener usuarios registrados (ya sea amigos o todos los usuarios)
      const userFriends = await friends.getFriends();
      
      if (DEBUG_MODE) {
        console.log('Usuarios obtenidos:', userFriends);
      }
      
      // Limpiar contenedor
      friendsContainer.innerHTML = '';
      
      if (!userFriends || userFriends.length === 0) {
        friendsContainer.innerHTML = `
          <li class="text-center text-gray-500 text-sm py-2">
            No hay usuarios disponibles. Intenta más tarde.
          </li>
        `;
        return;
      }
      
      // Obtener el ID del usuario actual para no mostrarlo en la lista
      const currentUserId = utils.getCurrentUserId();
      
      // Renderizar lista de usuarios filtrados (excluyendo al usuario actual)
      const filteredUsers = userFriends.filter((user: any) => user._id !== currentUserId);
      
      if (filteredUsers.length === 0) {
        friendsContainer.innerHTML = `
          <li class="text-center text-gray-500 text-sm py-2">
            No hay otros usuarios registrados.
          </li>
        `;
        return;
      }
      
      filteredUsers.forEach((user: any) => {
        const friendItem = document.createElement('li');
        friendItem.className = 'flex items-center space-x-3 py-2';
        
        // Asegurarnos de que la URL de la imagen de perfil sea completa
        let profileImageUrl = user.profilePicture || '/images/avatar-placeholder.png';
        if (profileImageUrl && profileImageUrl.startsWith('/uploads/')) {
          profileImageUrl = `http://localhost:5000${profileImageUrl}`;
        }
        
        // Determinar si está en línea (por defecto no)
        const isOnline = user.online === true;
        
        // Determinar si ya es un amigo (para frontend, asumimos que no por ahora)
        const isAlreadyFriend = user.isFriend === true;
        
        friendItem.innerHTML = `
          <img src="${profileImageUrl}" alt="${user.name}" class="h-10 w-10 rounded-full object-cover border-2 border-purple-100">
          <div class="flex-1">
            <p class="text-sm font-medium text-purple-900">${user.name}</p>
            <p class="text-xs text-gray-500">${user.bio || 'Usuario de TellMe'}</p>
          </div>
          <button class="add-friend-btn text-purple-500 hover:text-purple-700" data-user-id="${user._id}">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
          </button>
        `;
        
        // Añadir event listener para añadir amigo
        const addBtn = friendItem.querySelector('.add-friend-btn') as HTMLButtonElement;
        if (addBtn) {
          addBtn.addEventListener('click', async () => {
            const userId = addBtn.getAttribute('data-user-id');
            if (!userId) return;
            
            try {
              // Deshabilitar el botón mientras se procesa
              addBtn.disabled = true;
              addBtn.innerHTML = `
                <div class="inline-block animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-purple-600"></div>
              `;
              
              const result = await friends.sendFriendRequest(userId);
              
              // Verificar si tenemos un resultado con isError (formato nuevo)
              if (result && typeof result === 'object' && 'isError' in result) {
                if (result.success === false) {
                  // Es un error controlado, mostrar mensaje adecuado
                  console.log('Mensaje del servidor:', result.message);
                  
                  // Si ya existe solicitud o son amigos, mostrar un estado diferente
                  if (result.message && (
                      result.message.includes('Ya existe una solicitud') || 
                      result.message.includes('Ya son amigos'))
                  ) {
                    addBtn.outerHTML = `
                      <span class="text-gray-600 text-xs px-2 py-1 bg-gray-50 rounded-md">
                        ${result.message.includes('Ya existe una solicitud') ? 'Pendiente' : 'Amigos'}
                      </span>
                    `;
                    return;
                  }
                  
                  alert(result.message || 'No se pudo enviar la solicitud. Inténtalo de nuevo.');
                  
                  // Restaurar el botón y mostrar error
                  addBtn.disabled = false;
                  addBtn.innerHTML = `
                    <svg class="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                  `;
                  
                  setTimeout(() => {
                    addBtn.innerHTML = `
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                      </svg>
                    `;
                    addBtn.classList.remove('text-red-500');
                    addBtn.classList.add('text-purple-500');
                  }, 2000);
                  return;
                }
              }
              
              // Caso de éxito (ya sea con objeto nuevo o con respuesta estándar)
              addBtn.outerHTML = `
                <span class="text-green-600 text-xs px-2 py-1 bg-green-50 rounded-md">
                  <svg class="h-4 w-4 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Enviada
                </span>
              `;
            } catch (error) {
              console.error('Error inesperado al enviar solicitud de amistad:', error);
              
              // Restaurar el botón y mostrar error
              addBtn.disabled = false;
              addBtn.innerHTML = `
                <svg class="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
              `;
              
              alert('No se pudo enviar la solicitud. Inténtalo de nuevo.');
            }
          });
        }
        
        friendsContainer.appendChild(friendItem);
      });
    } catch (error) {
      console.error('Error al cargar usuarios:', error);
      friendsContainer.innerHTML = `
        <li class="text-center text-red-500 text-sm py-2">
          Error al cargar usuarios. Intenta de nuevo más tarde.
        </li>
      `;
    }
  };

  // Cargar solicitudes de amistad
  const loadFriendRequests = async () => {
    if (!friendRequestsContainer) return;
    
    try {
      // Obtener solicitudes de amistad
      const requests = await friends.getFriendRequests();
      
      // Limpiar contenedor
      friendRequestsContainer.innerHTML = '';
      
      // Actualizar indicador de solicitudes en el navbar si existe
      const requestIndicator = document.getElementById('request-indicator');
      if (requestIndicator) {
        if (requests && requests.length > 0) {
          requestIndicator.textContent = requests.length.toString();
          requestIndicator.classList.remove('hidden');
        } else {
          requestIndicator.classList.add('hidden');
        }
      }
      
      if (!requests || requests.length === 0) {
        // No mostrar nada si no hay solicitudes
        friendRequestsContainer.classList.remove('mb-6');
        friendRequestsContainer.classList.add('hidden');
        return;
      }
      
      // Mostrar sección de solicitudes con un diseño más prominente y con animación
      friendRequestsContainer.classList.remove('hidden');
      friendRequestsContainer.classList.add('mb-6', 'animate-pulse');
      // Quitar la animación después de 2 segundos
      setTimeout(() => {
        friendRequestsContainer.classList.remove('animate-pulse');
      }, 2000);
      
      friendRequestsContainer.innerHTML = `
        <div class="bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl shadow-sm border border-purple-200 overflow-hidden">
          <div class="bg-gradient-to-r from-purple-500 to-indigo-500 py-3 px-4">
            <h4 class="font-semibold text-white flex items-center">
              <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              Solicitudes de amistad (${requests.length})
            </h4>
          </div>
          <div class="p-4" id="requestsList"></div>
        </div>
      `;
      
      const requestsList = document.getElementById('requestsList') as HTMLDivElement;
      
      // Renderizar solicitudes con un nuevo diseño más atractivo
      requests.forEach((request: any) => {
        const requestItem = document.createElement('div');
        requestItem.className = 'bg-white rounded-lg p-4 mb-3 flex flex-col shadow-sm border border-purple-100';
        requestItem.dataset.requestId = request._id;
        
        // Asegurarnos de que la URL de la imagen de perfil sea completa
        let profileImageUrl = request.sender.profilePicture || '/images/avatar-placeholder.png';
        if (profileImageUrl && profileImageUrl.startsWith('/uploads/')) {
          profileImageUrl = `http://localhost:5000${profileImageUrl}`;
        }
        
        // Formatear la fecha de la solicitud
        const formatDate = (dateString: string) => {
          const date = new Date(dateString);
          // Si es hoy, mostrar "Hoy a las HH:MM"
          const today = new Date();
          if (date.toDateString() === today.toDateString()) {
            return `Hoy a las ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
          }
          // Si es ayer, mostrar "Ayer a las HH:MM"
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          if (date.toDateString() === yesterday.toDateString()) {
            return `Ayer a las ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
          }
          // En otro caso, mostrar la fecha completa
          return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
        };
        
        const createdAtFormatted = formatDate(request.createdAt);
        
        requestItem.innerHTML = `
          <div class="flex items-center mb-3">
            <img src="${profileImageUrl}" alt="${request.sender.name}" class="h-14 w-14 rounded-full object-cover mr-3 border-2 border-purple-200">
            <div class="flex-1">
              <p class="font-semibold text-purple-900">${request.sender.name}</p>
              <p class="text-xs text-gray-500 mt-1">Solicitud recibida: ${createdAtFormatted}</p>
            </div>
          </div>
          <div class="flex justify-between gap-2" id="request-buttons-${request._id}">
            <button class="accept-request w-1/2 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg text-sm hover:opacity-90 transition-colors flex items-center justify-center" data-request-id="${request._id}">
              <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              Aceptar
            </button>
            <button class="reject-request w-1/2 py-2 bg-gray-200 text-gray-700 rounded-lg text-sm hover:bg-gray-300 transition-colors flex items-center justify-center" data-request-id="${request._id}">
              <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Rechazar
            </button>
          </div>
        `;
        
        requestsList.appendChild(requestItem);
        
        // Añadir event listeners a los botones
        const acceptBtn = requestItem.querySelector('.accept-request') as HTMLButtonElement;
        const rejectBtn = requestItem.querySelector('.reject-request') as HTMLButtonElement;
        const buttonsContainer = requestItem.querySelector(`#request-buttons-${request._id}`) as HTMLDivElement;
        
        if (acceptBtn) {
          acceptBtn.addEventListener('click', async () => {
            const requestId = acceptBtn.dataset.requestId;
            if (!requestId) return;
            
            // Mostrar indicador de carga
            buttonsContainer.innerHTML = `
              <div class="text-center w-full py-2">
                <div class="inline-block animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-purple-600"></div>
                <span class="ml-2 text-purple-600 text-sm">Procesando...</span>
              </div>
            `;
            
            try {
              await friends.acceptFriendRequest(requestId);
              
              // Mostrar mensaje de éxito
              buttonsContainer.innerHTML = `
                <div class="w-full py-2 bg-green-100 text-green-700 rounded-lg text-center">
                  <svg class="h-5 w-5 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  ¡Ahora son amigos!
                </div>
              `;
              
              // Después de mostrar brevemente el mensaje, eliminar la solicitud de la vista
              setTimeout(() => {
                requestItem.classList.add('opacity-0', 'transform', 'scale-95', 'transition-all', 'duration-500');
                setTimeout(() => {
                  requestItem.remove();
                  
                  // Si no hay más solicitudes, ocultar el contenedor
                  if (requestsList.children.length === 0) {
                    friendRequestsContainer.classList.add('hidden');
                    friendRequestsContainer.classList.remove('mb-6');
                  }
                }, 500);
              }, 1500);
              
              // Recargar amigos y posts
              loadFriends();
              loadPosts();
            } catch (error) {
              console.error('Error al aceptar solicitud:', error);
              
              // Restaurar botones en caso de error
              buttonsContainer.innerHTML = `
                <button class="accept-request w-1/2 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg text-sm hover:opacity-90 transition-colors flex items-center justify-center" data-request-id="${requestId}">
                  <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Aceptar
                </button>
                <button class="reject-request w-1/2 py-2 bg-gray-200 text-gray-700 rounded-lg text-sm hover:bg-gray-300 transition-colors flex items-center justify-center" data-request-id="${requestId}">
                  <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  Rechazar
                </button>
              `;
              
              // Añadir nuevamente los event listeners
              const newAcceptBtn = requestItem.querySelector('.accept-request') as HTMLButtonElement;
              const newRejectBtn = requestItem.querySelector('.reject-request') as HTMLButtonElement;
              
              if (newAcceptBtn) {
                newAcceptBtn.addEventListener('click', () => acceptBtn.click());
              }
              
              if (newRejectBtn) {
                newRejectBtn.addEventListener('click', () => rejectBtn.click());
              }
              
              alert('No se pudo aceptar la solicitud. Inténtalo de nuevo.');
            }
          });
        }
        
        if (rejectBtn) {
          rejectBtn.addEventListener('click', async () => {
            const requestId = rejectBtn.dataset.requestId;
            if (!requestId) return;
            
            // Mostrar indicador de carga
            buttonsContainer.innerHTML = `
              <div class="text-center w-full py-2">
                <div class="inline-block animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-purple-600"></div>
                <span class="ml-2 text-purple-600 text-sm">Procesando...</span>
              </div>
            `;
            
            try {
              await friends.rejectFriendRequest(requestId);
              
              // Mostrar mensaje de éxito
              buttonsContainer.innerHTML = `
                <div class="w-full py-2 bg-gray-100 text-gray-700 rounded-lg text-center">
                  Solicitud rechazada
                </div>
              `;
              
              // Después de mostrar brevemente el mensaje, eliminar la solicitud de la vista
              setTimeout(() => {
                requestItem.classList.add('opacity-0', 'transform', 'scale-95', 'transition-all', 'duration-500');
                setTimeout(() => {
                  requestItem.remove();
                  
                  // Si no hay más solicitudes, ocultar el contenedor
                  if (requestsList.children.length === 0) {
                    friendRequestsContainer.classList.add('hidden');
                    friendRequestsContainer.classList.remove('mb-6');
                  }
                }, 500);
              }, 1500);
            } catch (error) {
              console.error('Error al rechazar solicitud:', error);
              
              // Restaurar botones en caso de error
              buttonsContainer.innerHTML = `
                <button class="accept-request w-1/2 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg text-sm hover:opacity-90 transition-colors flex items-center justify-center" data-request-id="${requestId}">
                  <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Aceptar
                </button>
                <button class="reject-request w-1/2 py-2 bg-gray-200 text-gray-700 rounded-lg text-sm hover:bg-gray-300 transition-colors flex items-center justify-center" data-request-id="${requestId}">
                  <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  Rechazar
                </button>
              `;
              
              // Añadir nuevamente los event listeners
              const newAcceptBtn = requestItem.querySelector('.accept-request') as HTMLButtonElement;
              const newRejectBtn = requestItem.querySelector('.reject-request') as HTMLButtonElement;
              
              if (newAcceptBtn) {
                newAcceptBtn.addEventListener('click', () => acceptBtn.click());
              }
              
              if (newRejectBtn) {
                newRejectBtn.addEventListener('click', () => rejectBtn.click());
              }
              
              alert('No se pudo rechazar la solicitud. Inténtalo de nuevo.');
            }
          });
        }
      });
    } catch (error) {
      console.error('Error al cargar solicitudes de amistad:', error);
      friendRequestsContainer.innerHTML = `
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 text-red-600 text-center text-sm">
          <svg class="h-5 w-5 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          Error al cargar solicitudes. Intenta recargar la página.
        </div>
      `;
    }
  };

  // Función auxiliar para mostrar el tiempo transcurrido
  const getTimeAgo = (date: Date): string => {
    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval >= 1) {
      return interval === 1 ? 'hace 1 año' : `hace ${interval} años`;
    }
    
    interval = Math.floor(seconds / 2592000);
    if (interval >= 1) {
      return interval === 1 ? 'hace 1 mes' : `hace ${interval} meses`;
    }
    
    interval = Math.floor(seconds / 86400);
    if (interval >= 1) {
      return interval === 1 ? 'hace 1 día' : `hace ${interval} días`;
    }
    
    interval = Math.floor(seconds / 3600);
    if (interval >= 1) {
      return interval === 1 ? 'hace 1 hora' : `hace ${interval} horas`;
    }
    
    interval = Math.floor(seconds / 60);
    if (interval >= 1) {
      return interval === 1 ? 'hace 1 minuto' : `hace ${interval} minutos`;
    }
    
    return 'hace unos segundos';
  };

  // Buscador de usuarios
  if (searchUsersInput && searchResults) {
    // Variable para controlar el tiempo entre búsquedas
    let searchTimeout: ReturnType<typeof setTimeout> | null = null;
    
    searchUsersInput.addEventListener('input', () => {
      // Limpiar timeout anterior
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      // Configurar nuevo timeout para evitar demasiadas peticiones
      searchTimeout = setTimeout(async () => {
        const query = searchUsersInput.value.trim();
        
        // Si la consulta está vacía, ocultar resultados
        if (!query) {
          searchResults.classList.add('hidden');
          return;
        }
        
        // Mostrar un indicador de carga
        searchResults.innerHTML = `
          <div class="p-3 text-center text-gray-500">
            <div class="inline-block animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-purple-600 mr-2"></div>
            Buscando...
          </div>
        `;
        searchResults.classList.remove('hidden');
        
        try {
          // Buscar usuarios que coincidan con la consulta
          const users = await friends.searchUsers(query);
          
          // Limpiar resultados para mostrar los nuevos
          searchResults.innerHTML = '';
          
          if (!users || users.length === 0) {
            searchResults.innerHTML = `
              <div class="p-3 text-center text-gray-500">
                No se encontraron usuarios con "${query}"
              </div>
            `;
            return;
          }
          
          // Mostrar resultados
          users.forEach((user: any) => {
            const userItem = document.createElement('div');
            userItem.className = 'p-3 hover:bg-purple-50 cursor-pointer flex items-center';
            
            // Asegurarnos de que la URL de la imagen de perfil sea completa
            let profileImageUrl = user.profilePicture || '/images/avatar-placeholder.png';
            if (profileImageUrl && profileImageUrl.startsWith('/uploads/')) {
              profileImageUrl = `http://localhost:5000${profileImageUrl}`;
            }
            
            userItem.innerHTML = `
              <img src="${profileImageUrl}" alt="${user.name}" class="h-10 w-10 rounded-full object-cover mr-3">
              <div class="flex-1">
                <p class="font-medium text-purple-900">${user.name}</p>
                <p class="text-xs text-gray-500">${user.bio || user.email || 'Usuario de TellMe'}</p>
              </div>
              <button class="add-friend-btn text-purple-500 hover:text-purple-700 p-1" data-user-id="${user._id}">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
              </button>
            `;
            
            // Añadir event listener para enviar solicitud de amistad
            const addBtn = userItem.querySelector('.add-friend-btn') as HTMLButtonElement;
            if (addBtn) {
              addBtn.addEventListener('click', async (e) => {
                e.stopPropagation(); // Evitar que el clic propague al elemento padre
                const userId = addBtn.dataset.userId;
                if (!userId) return;
                
                try {
                  // Deshabilitar botón mientras se envía la solicitud
                  addBtn.disabled = true;
                  addBtn.innerHTML = `
                    <div class="inline-block animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-purple-600"></div>
                  `;
                  
                  await friends.sendFriendRequest(userId);
                  
                  // Cambiar el botón por un mensaje de éxito
                  addBtn.outerHTML = `
                    <span class="text-green-600 text-xs px-2 py-1 bg-green-50 rounded-md">
                      <svg class="h-4 w-4 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                      </svg>
                      Enviada
                    </span>
                  `;
                } catch (error) {
                  const errorObj = error as any; // Usar any para superar limitaciones de tipo
                  
                  // Verificar si es un objeto con la estructura actualizada
                  if (errorObj && typeof errorObj === 'object' && 'isError' in errorObj) {
                    console.log('Mensaje del servidor:', errorObj.message);
                    
                    // Si ya existe solicitud o son amigos, mostrar un estado diferente
                    if (errorObj.message && (
                        errorObj.message.includes('Ya existe una solicitud') || 
                        errorObj.message.includes('Ya son amigos'))
                    ) {
                      addBtn.outerHTML = `
                        <span class="text-gray-600 text-xs px-2 py-1 bg-gray-50 rounded-md">
                          ${errorObj.message.includes('Ya existe una solicitud') ? 'Pendiente' : 'Amigos'}
                        </span>
                      `;
                      return;
                    }
                    
                    alert(errorObj.message || 'No se pudo enviar la solicitud. Inténtalo de nuevo.');
                  } else {
                    console.error('Error al enviar solicitud de amistad:', errorObj);
                    alert('No se pudo enviar la solicitud. Inténtalo de nuevo.');
                  }
                  
                  // Restaurar el botón y mostrar error
                  addBtn.disabled = false;
                  addBtn.innerHTML = `
                    <svg class="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                  `;
                  
                  setTimeout(() => {
                    addBtn.innerHTML = `
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                      </svg>
                    `;
                    addBtn.classList.remove('text-red-500');
                    addBtn.classList.add('text-purple-500');
                  }, 2000);
                }
              });
            }
            
            // Añadir event listener para ver perfil
            userItem.addEventListener('click', () => {
              // Por ahora solo mostramos un mensaje
              alert(`Ver perfil de ${user.name} (funcionalidad en desarrollo)`);
            });
            
            searchResults.appendChild(userItem);
          });
        } catch (error) {
          console.error('Error al buscar usuarios:', error);
          searchResults.innerHTML = `
            <div class="p-3 text-center text-red-500">
              Error al buscar usuarios. Intenta de nuevo.
            </div>
          `;
        }
      }, 300); // Esperar 300ms después de que el usuario deje de escribir
    });
    
    // Ocultar resultados cuando se hace clic fuera del buscador
    document.addEventListener('click', (e) => {
      if (!searchUsersInput.contains(e.target as Node) && !searchResults.contains(e.target as Node)) {
        searchResults.classList.add('hidden');
      }
    });
  }

  // Toggle para mostrar posts de amigos o todos
  if (toggleFriendMode) {
    toggleFriendMode.addEventListener('click', () => {
      showFriendsPostsOnly = !showFriendsPostsOnly;
      
      // Actualizar texto del botón
      toggleFriendMode.textContent = showFriendsPostsOnly ? 'Ver todas las publicaciones' : 'Ver solo publicaciones de amigos';
      
      // Recargar posts
      if (loadingPosts) {
        loadingPosts.classList.remove('hidden');
      }
      loadPosts();
    });
  }

  // Cargar datos al iniciar la página
  loadPosts();
  loadFriends();
  loadFriendRequests();
  
  // Configurar actualización periódica de solicitudes de amistad cada 30 segundos
  const friendRequestsInterval = setInterval(() => {
    loadFriendRequests();
  }, 30000);
  
  // Limpiar el intervalo cuando se navegue a otra página
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'hidden') {
      clearInterval(friendRequestsInterval);
    }
  });

  // Inicializar los listeners de eventos 
  friends.initializeEventListeners();
  
  // Escuchar cambios en los datos de amistad
  window.addEventListener('friendshipDataChanged', function() {
    console.log('Datos de amistad actualizados, recargando...');
    loadFriendRequests();
    loadFriends();
  });
  
  // Escuchar nuevas solicitudes de amistad - utilizando declare para evitar errores de tipo
  window.addEventListener('friendRequestSent', function(event) {
    // @ts-ignore - Ignoramos el error de tipo para el evento personalizado
    const detail = event.detail;
    console.log('Nueva solicitud de amistad recibida:', detail);
    
    // Si la solicitud está dirigida al usuario actual, actualizar la interfaz
    const currentUserId = utils.getCurrentUserId();
    if (detail && detail.receiver === currentUserId) {
      loadFriendRequests();
    }
  });

  // Configurar navegación con transición
  document.addEventListener('DOMContentLoaded', () => {
    // Obtener todos los enlaces de navegación
    const navLinks = document.querySelectorAll('a[href^="/"]');
    
    // Configurar los botones de logout para que muestren la transición
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Mostrar transición antes de cerrar sesión
        // @ts-ignore - Accedemos a la función global
        if (window.navigateTo) {
          // @ts-ignore
          window.showTransition?.();
          
          setTimeout(() => {
            auth.logout();
            window.location.href = '/';
          }, 600);
        } else {
          auth.logout();
          window.location.href = '/';
        }
      });
    }
  });

  // Agregar funcionalidad al botón de notificaciones
  const notificationsBtn = document.getElementById('notifications-btn');
  const initialRequestsVisibility = friendRequestsContainer?.classList.contains('hidden');

  if (notificationsBtn) {
    notificationsBtn.addEventListener('click', (e) => {
      e.preventDefault();
      
      // Si hay solicitudes, mostrarlas u ocultarlas
      if (friendRequestsContainer) {
        if (friendRequestsContainer.classList.contains('hidden')) {
          // Si está oculto, mostrar y hacer scroll hasta él
          friendRequestsContainer.classList.remove('hidden');
          friendRequestsContainer.classList.add('mb-6');
          
          // Animar para llamar la atención
          friendRequestsContainer.classList.add('animate-pulse');
          setTimeout(() => {
            friendRequestsContainer.classList.remove('animate-pulse');
          }, 1000);
          
          // Hacer scroll hasta las solicitudes
          friendRequestsContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          // Si ya está visible, solo hacer scroll
          friendRequestsContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      // Cargar las solicitudes de nuevo para asegurarse de que estén actualizadas
      loadFriendRequests();
    });
  }
</script> 