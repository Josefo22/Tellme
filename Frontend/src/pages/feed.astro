---
import Layout from '../layouts/Layout.astro';
import LoadingTransition from '../components/LoadingTransition.astro';
---
<LoadingTransition />
<Layout title="TellMe - Feed">
  <!-- Add meta tag to ensure UTF-8 -->
  <meta charset="UTF-8" slot="head"/>
  
  <!-- Cargar API directamente desde archivo externo -->
  <script is:inline src="/api-init.js"></script>
  
  <!-- Implementación alternativa en caso de fallo -->
  <script is:inline>
    // Verificar si API_URL ya existe antes de declararlo
    if (typeof window.API_URL === 'undefined') {
      window.API_URL = window.location.hostname !== 'localhost' && !window.location.hostname.includes('127.0.0.1')
        ? 'https://app-pro-backend.onrender.com/api'
        : 'http://localhost:5000/api';
    }
    
    // Verificar si ya existe BASE_URL antes de declararlo
    if (typeof window.BASE_URL === 'undefined') {
      window.BASE_URL = window.location.hostname !== 'localhost' && !window.location.hostname.includes('127.0.0.1')
        ? 'https://app-pro-backend.onrender.com' 
        : 'http://localhost:5000';
    }
    
    // Implementación completa de respaldo
    if (!window.auth || !window.auth.getCurrentUser) {
      // Crear implementación mínima de la API
      window.utils = window.utils || {};
      window.utils.getToken = window.utils.getToken || (() => localStorage.getItem('token'));
      window.utils.setToken = window.utils.setToken || ((token) => localStorage.setItem('token', token));
      window.utils.removeToken = window.utils.removeToken || (() => localStorage.removeItem('token'));
      window.utils.isAuthenticated = window.utils.isAuthenticated || (() => !!window.utils.getToken());
      
      // Headers para peticiones autenticadas
      const getAuthHeaders = () => ({
        'Content-Type': 'application/json',
        'Authorization': window.utils.getToken() ? `Bearer ${window.utils.getToken()}` : ''
      });
      
      // Implementación de auth
      window.auth = window.auth || {};
      window.auth.getCurrentUser = window.auth.getCurrentUser || (async () => {
        try {
          const url = `${window.API_URL}/auth/me`;
          console.log(`Intentando obtener usuario actual desde: ${url}`);
          
          const response = await fetch(url, {
            headers: getAuthHeaders()
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const user = await response.json();
          console.log("Usuario obtenido exitosamente:", user);
          return user;
        } catch (e) {
          console.error("Error obteniendo usuario actual:", e);
          return {
            _id: 'usuario_demo',
            name: 'Usuario Demo',
            profilePicture: '/images/avatar-placeholder.png'
          };
        }
      });
      window.auth.logout = window.auth.logout || window.utils.removeToken;
      
      // Implementación de posts
      window.posts = window.posts || {};
      window.posts.getAll = window.posts.getAll || (async (friendsOnly) => {
        try {
          const url = `${window.API_URL}/posts`;
          console.log(`Intentando obtener posts desde: ${url}`);
          
          const response = await fetch(url, {
            headers: getAuthHeaders()
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const posts = await response.json();
          console.log("Posts obtenidos exitosamente:", posts);
          return posts;
        } catch (e) {
          console.error("Error obteniendo posts:", e);
          return [];
        }
      });
      
      window.posts.getComments = window.posts.getComments || (async (postId) => {
        try {
          const url = `${window.API_URL}/posts/${postId}`;
          console.log(`Intentando obtener post con comentarios desde: ${url}`);
          
          const response = await fetch(url, {
            headers: getAuthHeaders()
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const post = await response.json();
          console.log("Post obtenido exitosamente:", post);
          
          const comments = post.comments || [];
          console.log("Comentarios extraídos del post:", comments);
          return comments;
        } catch (e) {
          console.error("Error obteniendo comentarios:", e);
          return [];
        }
      });
      
      window.posts.comment = window.posts.comment || (async (postId, content) => {
        try {
          const url = `${window.API_URL}/posts/${postId}/comment`;
          console.log(`Intentando enviar comentario a: ${url}`);
          
          const response = await fetch(url, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify({ content })
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const data = await response.json();
          console.log("Comentario enviado exitosamente:", data);
          return data;
        } catch (e) {
          console.error("Error al enviar comentario:", e);
          return {
            success: true,
            comment: {
              _id: 'comment_' + Date.now(),
              content: content,
              createdAt: new Date().toISOString(),
              user: {
                _id: 'current_user',
                name: 'Tu',
                profilePicture: '/images/avatar-placeholder.png'
              }
            }
          };
        }
      });
      
      window.posts.like = window.posts.like || (async (postId) => {
        try {
          const url = `${window.API_URL}/posts/${postId}/like`;
          console.log(`Intentando dar like al post ${postId} usando ${url}`);
          
          const response = await fetch(url, {
            method: 'POST',
            headers: getAuthHeaders()
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const data = await response.json();
          console.log("Like procesado exitosamente:", data);
          return data;
        } catch (e) {
          console.error("Error al dar like:", e);
          return { success: true };
        }
      });
      
      window.posts.create = window.posts.create || (async (postData) => {
        try {
          const url = `${window.API_URL}/posts`;
          console.log(`Intentando crear post en: ${url}`);
          
          const response = await fetch(url, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify(postData)
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const data = await response.json();
          console.log("Post creado exitosamente:", data);
          return data;
        } catch (e) {
          console.error("Error al crear post:", e);
          throw e;
        }
      });
      
      // Implementación de friends
      window.friends = window.friends || {};
      window.friends.getFriends = window.friends.getFriends || (async () => {
        try {
          const url = `${window.API_URL}/friends`;
          console.log(`Intentando obtener amigos desde: ${url}`);
          
          const response = await fetch(url, {
            headers: getAuthHeaders()
          });
          
          if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
          }
          
          const friends = await response.json();
          console.log("Amigos obtenidos exitosamente:", friends);
          return friends;
        } catch (e) {
          console.error("Error obteniendo amigos:", e);
          return [];
        }
      });
      
      console.log('API implementada en línea como respaldo');
    }
  </script>
  <div class="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50">
    <!-- Navbar estilo modernizado -->
    <nav class="bg-white/80 backdrop-blur-sm shadow-lg fixed w-full top-0 z-50 border-b border-purple-100">
      <div class="max-w-7xl mx-auto px-4">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <a href="/feed" class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-indigo-600">TellMe</a>
            <div class="hidden md:block ml-6 relative">
              <input 
                type="text" 
                placeholder="Buscar en TellMe" 
                class="bg-purple-50 rounded-full py-2 pl-10 pr-4 text-sm w-64 focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all"
              >
              <svg class="h-4 w-4 text-purple-400 absolute left-3 top-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
          
          <!-- Desktop menu -->
          <div class="hidden md:flex items-center space-x-3">
            <a href="/profile" class="p-2 rounded-full hover:bg-purple-100 transition-colors relative">
              <span class="sr-only">Perfil</span>
              <div class="relative h-8 w-8 rounded-full overflow-hidden">
                <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials text-xs">
                  TM
                </div>
              </div>
              <span class="absolute top-0 right-0 h-2 w-2 bg-green-400 rounded-full"></span>
            </a>
            <!-- Botón de notificaciones con indicador de solicitudes -->
            <a href="#" id="notifications-btn" class="p-2 rounded-full hover:bg-purple-100 transition-colors relative">
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
              </svg>
              <!-- Indicador de solicitudes pendientes -->
              <span id="request-indicator" class="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center font-semibold hidden">0</span>
            </a>
            <button id="logoutBtn" class="p-2 rounded-full hover:bg-purple-100 transition-colors">
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
          </div>
          
          <!-- Mobile menu button -->
          <div class="md:hidden flex items-center">
            <button id="mobile-menu-button" class="p-2 rounded-full hover:bg-purple-100 transition-colors">
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Mobile menu (hidden by default) -->
        <div id="mobile-menu" class="md:hidden hidden pb-3">
          <div class="px-2 pt-2 pb-3 space-y-1">
            <div class="relative mb-3">
              <input 
                type="text" 
                placeholder="Buscar en TellMe" 
                class="bg-purple-50 rounded-full py-2 pl-10 pr-4 text-sm w-full focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all"
              >
              <svg class="h-4 w-4 text-purple-400 absolute left-3 top-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <a href="/profile" class="flex items-center px-3 py-2 rounded-md hover:bg-purple-50 transition-colors">
              <div class="relative h-8 w-8 rounded-full overflow-hidden mr-3">
                <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials text-xs">
                  TM
                </div>
              </div>
              <span>Mi perfil</span>
            </a>
            <a href="#" id="mobile-notifications" class="flex items-center px-3 py-2 rounded-md hover:bg-purple-50 transition-colors">
              <svg class="h-6 w-6 text-purple-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
              </svg>
              <span>Notificaciones</span>
              <!-- Mobile Indicador de solicitudes pendientes -->
              <span id="mobile-request-indicator" class="ml-2 h-5 w-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center font-semibold hidden">0</span>
            </a>
            <button id="mobile-logoutBtn" class="w-full flex items-center px-3 py-2 rounded-md hover:bg-purple-50 transition-colors">
              <svg class="h-6 w-6 text-purple-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              <span>Cerrar sesion</span>
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content con 3 columnas -->
    <main class="pt-20 pb-8">
      <div class="max-w-7xl mx-auto px-4 lg:flex">
        <!-- Barra lateral izquierda -->
        <div class="hidden lg:block lg:w-1/4 lg:pr-4">
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 mb-4 border border-purple-100">
            <ul class="space-y-2">
              <li>
                <a href="/profile" class="flex items-center p-3 rounded-lg hover:bg-purple-50 transition-colors">
                  <div class="relative h-10 w-10 rounded-full overflow-hidden flex-shrink-0 mr-3 shadow-md">
                    <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                    <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials">
                      TM
                    </div>
                  </div>
                  <span class="text-purple-900 font-medium">Mi Perfil</span>
                </a>
              </li>
              <li>
                <a href="#" class="flex items-center p-3 rounded-lg hover:bg-purple-50 transition-colors">
                  <svg class="h-10 w-10 text-purple-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  <span class="text-purple-900 font-medium">Amigos</span>
                </a>
              </li>            
            </ul>
          </div>
        </div>
        
        <!-- Contenido central -->
        <div class="w-full lg:w-2/4 px-0 lg:px-4">
          <!-- Create Post -->
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 mb-6 border border-purple-100">
            <div class="flex items-center space-x-4 mb-4">
              <div class="relative h-12 w-12 rounded-full overflow-hidden shadow-md">
                <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
                <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials">
                  TM
                </div>
              </div>
              <button 
                class="w-full px-4 py-3 border border-purple-200 rounded-full bg-purple-50 text-left text-gray-500 hover:bg-purple-100 transition-colors text-sm" 
                id="openPostModal"
                onclick="document.getElementById('postModal').classList.remove('hidden');"
              >
                Que hay de nuevo?
              </button>
            </div>
            <div class="flex justify-between items-center border-t border-purple-100 pt-4">
              <button 
                class="flex items-center px-3 py-2 rounded-lg hover:bg-purple-50 transition-colors text-sm" 
                id="uploadMediaBtn"
                onclick="document.getElementById('postModal').classList.remove('hidden');"
              >
                <svg class="h-6 w-6 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                <span class="hidden sm:inline">Foto/Video</span>
              </button>
              <button class="flex items-center px-3 py-2 rounded-lg hover:bg-purple-50 transition-colors text-sm">
                <svg class="h-6 w-6 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="hidden sm:inline">Sentimiento</span>
              </button>
            </div>
          </div>

          <!-- Posts Feed -->
          <div id="postsContainer" class="space-y-6">
            <!-- Los posts se cargarán dinámicamente aquí -->
            <div id="loadingPosts" class="text-center py-8 bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-purple-100">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-600"></div>
              <p class="mt-2 text-purple-600">Cargando publicaciones...</p>
            </div>
          </div>
        </div>
        
        <!-- Barra lateral derecha -->
        <div class="hidden lg:block lg:w-1/4 lg:pl-4">
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 mb-4 border border-purple-100">
            <div class="flex justify-between items-center mb-4">
              <h3 class="font-semibold text-purple-900">Contactos</h3>
              <button id="toggleFriendMode" class="text-xs text-purple-600 hover:text-purple-800">
                Ver todas las publicaciones
              </button>
            </div>
            
            <!-- Buscador de usuarios -->
            <div class="mb-4 relative">
              <div class="relative">
                <input 
                  type="text" 
                  id="searchUsers"
                  placeholder="Buscar usuarios..." 
                  class="w-full bg-purple-50 rounded-lg py-2 pl-8 pr-4 text-sm focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all"
                >
                <svg class="h-4 w-4 text-purple-400 absolute left-2 top-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              
              <!-- Resultados de búsqueda (inicialmente ocultos) -->
              <div id="searchResults" class="absolute z-10 mt-1 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-60 overflow-y-auto hidden">
                <!-- Los resultados se cargarán dinámicamente aquí -->
              </div>
            </div>
            
            <!-- Solicitudes de amistad (Movidas arriba para mayor visibilidad) -->
            <div id="friendRequestsContainer" class="mb-6">
              <!-- Las solicitudes se cargarán dinámicamente aquí -->
            </div>
            
            <!-- Lista de amigos -->
            <ul class="space-y-4">
              <!-- Los amigos se cargarán dinámicamente aquí -->
              <li class="text-center text-gray-500 py-2">
                Cargando contactos...
              </li>
            </ul>
          </div>
        </div>
        
        <!-- Versión móvil de amigos y solicitudes (visible solo en móvil) -->
        <div class="block lg:hidden w-full mt-6 mb-4">
          <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-5 border border-purple-100">
            <div class="flex justify-between items-center mb-4">
              <h3 class="font-semibold text-purple-900">Amigos</h3>
              <button id="mobile-toggleFriendMode" class="text-xs text-purple-600 hover:text-purple-800">
                Ver todas las publicaciones
              </button>
            </div>
            
            <!-- Solicitudes de amistad móvil -->
            <div id="mobile-friendRequestsContainer" class="mb-4">
              <!-- Las solicitudes se cargarán dinámicamente aquí -->
            </div>
            
            <!-- Lista de amigos móvil (versión horizontal) -->
            <div class="overflow-x-auto pb-2">
              <div class="flex space-x-3" id="mobile-friendsList">
                <!-- Los amigos se cargarán dinámicamente aquí como avatares horizontales -->
                <div class="text-center text-gray-500 py-2 w-full">
                  Cargando contactos...
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Modal para crear post estilo Facebook -->
    <div id="postModal" class="fixed inset-0 bg-black/60 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-xl w-full max-w-lg mx-4 shadow-xl overflow-hidden">
        <div class="flex justify-between items-center p-4 border-b border-purple-100">
          <h3 class="text-lg sm:text-xl font-semibold text-purple-900">Crear publicacion</h3>
          <button id="closePostModal" class="text-gray-500 hover:text-gray-700">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="p-4">
          <div class="flex items-center space-x-3 mb-4">
            <div class="relative h-10 w-10 rounded-full overflow-hidden">
              <img src="/images/avatar-placeholder.png" alt="Foto de perfil" class="h-full w-full object-cover user-profile-image">
              <div class="h-full w-full flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-500 text-white font-bold user-initials text-sm">
                TM
              </div>
            </div>
            <div>
              <p class="font-medium text-purple-900" id="modalUserName">Tu Nombre</p>
              <div class="flex items-center text-xs bg-purple-50 rounded px-2 py-1 mt-1">
                <svg class="h-3 w-3 mr-1 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064" />
                </svg>
                <span>Publico</span>
                <svg class="h-3 w-3 ml-1 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>
          </div>
          <textarea id="postContent" class="w-full p-3 min-h-[120px] text-gray-800 text-lg focus:outline-none resize-none" placeholder="Q hay por aqui?"></textarea>
          <div id="mediaPreview" class="mb-4 hidden">
            <div class="relative">
              <img id="previewImage" src="" alt="Vista previa" class="max-h-60 rounded-lg mx-auto">
              <button id="removeMediaBtn" class="absolute top-2 right-2 bg-gray-800 text-white rounded-full p-1 hover:bg-gray-700 transition-colors">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
          <div class="bg-gray-100 rounded-lg p-3 flex items-center justify-between mb-4">
            <div class="flex space-x-2">
              <button id="addMediaBtn" class="text-gray-500 hover:bg-gray-200 p-2 rounded-full transition-colors">
                <svg class="h-6 w-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </button>
              <button class="text-gray-500 hover:bg-gray-200 p-2 rounded-full transition-colors">
                <svg class="h-6 w-6 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </button>
              <button class="text-gray-500 hover:bg-gray-200 p-2 rounded-full transition-colors">
                <svg class="h-6 w-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </button>
            </div>
          </div>
          <button id="submitPostBtn" class="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
            Publicar
          </button>
        </div>
      </div>
    </div>

    <!-- Modal para comentarios -->
    <div id="commentModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-2xl p-4 sm:p-6 w-full max-w-lg mx-4 shadow-xl">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg sm:text-xl font-semibold text-gray-800">Comentarios</h3>
          <button id="closeCommentModal" class="text-gray-500 hover:text-gray-700">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <!-- Post original -->
        <div class="border-b border-gray-200 pb-4 mb-4">
          <div class="flex items-start space-x-3">
            <div class="relative h-10 w-10 rounded-full overflow-hidden flex-shrink-0">
              <img id="commentModalAuthorImg" src="/images/avatar-placeholder.png" alt="Autor" class="h-full w-full object-cover">
              <div id="commentModalAuthorInitials" class="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-purple-500 to-indigo-600 text-white font-bold">
                JD
              </div>
            </div>
            <div>
              <p class="font-semibold text-gray-900" id="commentModalAuthorName">Nombre del Autor</p>
              <p class="text-sm text-gray-500" id="commentModalDate">Hace 2 horas</p>
              <p class="mt-2 text-gray-800" id="commentModalContent">Contenido del post...</p>
              <div id="commentModalImageContainer" class="mt-3 hidden">
                <img id="commentModalImage" src="" alt="Imagen del post" class="rounded-lg max-h-60 w-auto">
              </div>
            </div>
          </div>
        </div>
        
        <!-- Lista de comentarios -->
        <div id="commentsList" class="space-y-4 max-h-60 sm:max-h-80 overflow-y-auto mb-4">
          <!-- Los comentarios se cargarán dinámicamente aquí -->
          <p class="text-center text-gray-500 py-3" id="commentsLoading">Cargando comentarios...</p>
          <p class="text-center text-gray-500 py-3 hidden" id="noCommentsMessage">No hay comentarios. ¡Se el primero en comentar!</p>
        </div>
        
        <!-- Formulario para nuevo comentario -->
        <div class="flex">
          <input type="text" id="commentInput" class="flex-1 p-3 border border-gray-200 rounded-l-xl focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Escribe un comentario...">
          <button id="submitCommentBtn" class="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-r-xl hover:opacity-90 transition-colors">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          </button>
        </div>
        <!-- Indicador de carga de envío de comentario -->
        <div id="commentSubmitLoading" class="text-center mt-2 hidden">
          <div class="inline-block animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-purple-600 mr-1"></div>
          <span class="text-xs text-purple-600">Enviando comentario...</span>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Mejoras de accesibilidad */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
  
  /* Animación para nuevos comentarios */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.3s ease-out forwards;
  }
  
  /* Transición para el menú móvil */
  #mobile-menu {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out, opacity 0.2s ease-out;
    opacity: 0;
  }
  
  #mobile-menu:not(.hidden) {
    max-height: 300px;
    opacity: 1;
  }
</style>

<script>
  // Extender el tipo Window para permitir propiedades personalizadas
  interface Window {
    auth: {
      getCurrentUser: () => Promise<any>;
      logout: () => void;
    };
    utils: {
      isAuthenticated: () => boolean;
      getToken: () => string | null;
      setToken: (token: string) => void;
      removeToken: () => void;
    };
    posts: {
      getAll: (friendsOnly?: boolean) => Promise<any[]>;
      getComments: (postId: string) => Promise<any[]>;
      comment: (postId: string, content: string) => Promise<any>;
      like: (postId: string) => Promise<any>;
      create: (postData: any) => Promise<any>;
    };
    friends: {
      getFriends: () => Promise<any[]>;
    };
    abrirModal: (id: string) => void;
  }
  
  // Variables principales con tipos definidos
  let currentUser: any = null;
  let showFriendsPostsOnly: boolean = false;
  let postsContainer: HTMLElement | null = null;
  let loadingPosts: HTMLElement | null = null;
  let modalUserName: HTMLElement | null = null;
  let toggleFriendMode: HTMLElement | null = null;
  let mobileToggleFriendMode: HTMLElement | null = null;
  let logoutBtn: HTMLElement | null = null;
  let mobileLogoutBtn: HTMLElement | null = null;
  let postModal: HTMLElement | null = null;
  let postContent: HTMLTextAreaElement | null = null;
  let submitPostBtn: HTMLElement | null = null;
  let friendsContainer: HTMLElement | null = null;
  let mobileFriendsContainer: HTMLElement | null = null;
  let selectedPostId: string | null = null;
  let imageBase64: string | null = null;
  
  // Función para abrir modales
  function abrirModal(id: string): void {
    try {
      const modal = document.getElementById(id);
      if (modal) {
        modal.classList.remove('hidden');
      }
    } catch (error) {
      console.error("Error al abrir modal:", error);
    }
  }
  
  // Asignar al objeto window
  (window as any).abrirModal = abrirModal;
  
  // Esperar a que el documento esté listo
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Feed: documento cargado');
    initDOM();
    initApp();
  });
  
  // Inicializar elementos DOM cuando el documento esté listo
  function initDOM(): void {
    postsContainer = document.getElementById('postsContainer');
    loadingPosts = document.getElementById('loadingPosts');
    modalUserName = document.getElementById('modalUserName');
    toggleFriendMode = document.getElementById('toggleFriendMode');
    mobileToggleFriendMode = document.getElementById('mobile-toggleFriendMode');
    logoutBtn = document.getElementById('logoutBtn');
    mobileLogoutBtn = document.getElementById('mobile-logoutBtn');
    postModal = document.getElementById('postModal');
    postContent = document.getElementById('postContent') as HTMLTextAreaElement;
    submitPostBtn = document.getElementById('submitPostBtn');
    friendsContainer = document.querySelector('.space-y-4');
    mobileFriendsContainer = document.getElementById('mobile-friendsList');
    
    // Configurar el menú hamburguesa para móviles
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      // Función para alternar la visibilidad del menú
      const toggleMobileMenu = () => {
        if (mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.remove('hidden');
          setTimeout(() => {
            document.addEventListener('click', closeMobileMenuOutside);
          }, 100);
        } else {
          mobileMenu.classList.add('hidden');
          document.removeEventListener('click', closeMobileMenuOutside);
        }
      };
      
      // Función para cerrar el menú al hacer clic fuera de él
      const closeMobileMenuOutside = (event: MouseEvent) => {
        if (!mobileMenuButton.contains(event.target as Node) && 
            !mobileMenu.contains(event.target as Node)) {
          mobileMenu.classList.add('hidden');
          document.removeEventListener('click', closeMobileMenuOutside);
        }
      };
      
      // Configurar evento de clic en el botón hamburguesa
      mobileMenuButton.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleMobileMenu();
      });
      
      // Configurar eventos para cerrar el menú al hacer clic en cualquier enlace o botón del menú
      const mobileMenuLinks = mobileMenu.querySelectorAll('a, button');
      mobileMenuLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
        });
      });
    }
    
    console.log('Elementos DOM inicializados:', {
      postsContainer,
      loadingPosts,
      friendsContainer,
      mobileFriendsContainer
    });
  }
  
  // Inicializar la aplicación
  function initApp(): void {
    console.log('----- INICIALIZANDO FEED -----');
    
    // Verificar si el usuario está autenticado
    const utils = (window as any).utils;
    console.log('Estado de autenticación:', {
      utils: !!utils,
      tokenExiste: utils && utils.getToken ? !!utils.getToken() : null,
      estaAutenticado: utils && utils.isAuthenticated ? utils.isAuthenticated() : null
    });
    
    const isAuthenticated = typeof window !== 'undefined' && 
                          utils && 
                          typeof utils.isAuthenticated === 'function' && 
                          utils.isAuthenticated();
                          
    if (!isAuthenticated) {
      console.log('Usuario no autenticado, redirigiendo a login');
      window.location.href = '/';
      return;
    }
    
    // Asegurar que los elementos del DOM necesarios estén presentes
    if (!postModal) {
      console.error('Error: Modal de publicación no encontrado');
    }
    
    if (!postsContainer) {
      console.error('Error: Contenedor de posts no encontrado');
    }
    
    // Configurar eventos de botones
    setupButtonEvents();
    
    // Cargar usuario y publicaciones
    try {
      // Primero cargar usuario y luego posts
      loadCurrentUser().then(() => {
        // Configurar componentes
        setupPostModal();
        
        // Cargar posts y amigos
        loadPosts();
        loadFriends();
      }).catch(error => {
        console.error('Error inicializando:', error);
      });
    } catch (error) {
      console.error('Error en la inicialización:', error);
    }
  }
  
  // Función para cargar datos del usuario actual
  async function loadCurrentUser(): Promise<void> {
    try {
      console.log('Cargando datos del usuario actual...');
      if (!(window as any).auth || !(window as any).auth.getCurrentUser) {
        console.error('La función auth.getCurrentUser no está disponible');
        return;
      }
      currentUser = await (window as any).auth.getCurrentUser();
      console.log('Usuario cargado:', currentUser);
      
      if (modalUserName) {
        modalUserName.textContent = currentUser.name;
      }
      
      updateUserImages();
    } catch (error) {
      console.error('Error al cargar datos del usuario:', error);
    }
  }
  
  // Función principal para cargar publicaciones
  async function loadPosts(): Promise<void> {
    console.log('Iniciando carga de publicaciones...');
    
    // Verificar si el contenedor de posts existe
    if (!postsContainer) {
      postsContainer = document.getElementById('postsContainer');
      if (!postsContainer) {
        console.error('No se encontró el contenedor de posts');
        return;
      }
    }
    
    // Buscar o crear el elemento de carga
    if (!loadingPosts) {
      loadingPosts = document.getElementById('loadingPosts');
      if (!loadingPosts) {
        loadingPosts = document.createElement('div');
        loadingPosts.id = 'loadingPosts';
        loadingPosts.className = 'text-center py-8 bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-purple-100';
        loadingPosts.innerHTML = `
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-600"></div>
          <p class="mt-2 text-purple-600">Cargando publicaciones...</p>
        `;
        postsContainer.appendChild(loadingPosts);
      }
    }
    
    // Mostrar indicador de carga
    if (loadingPosts) {
      loadingPosts.style.display = 'block';
    }
    
    try {
      // Verificar que la función posts.getAll existe
      if (!(window as any).posts || !(window as any).posts.getAll) {
        console.error('La función posts.getAll no está disponible');
        throw new Error('La API de publicaciones no está disponible');
      }
      console.log('Obteniendo publicaciones con friendsOnly=', showFriendsPostsOnly);
      // Obtener posts desde la API
      const postsData = await (window as any).posts.getAll(showFriendsPostsOnly);
      console.log('Publicaciones obtenidas:', postsData);
      
      // Procesar los datos obtenidos
      processPosts(postsData);
    } catch (error) {
      console.error('Error al cargar publicaciones:', error);
    } finally {
      // Ocultar indicador de carga
      if (loadingPosts) {
        loadingPosts.style.display = 'none';
      }
    }
  }
  
  // Funciones que faltan implementar
  function setupButtonEvents(): void {
    // Configurar botón de logout
    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleLogout);
    }
    
    if (mobileLogoutBtn) {
      mobileLogoutBtn.addEventListener('click', handleLogout);
    }
    
    // Configurar botones de modo de amigos
    if (toggleFriendMode) {
      toggleFriendMode.addEventListener('click', toggleFriendOnlyMode);
    }
    
    if (mobileToggleFriendMode) {
      mobileToggleFriendMode.addEventListener('click', toggleFriendOnlyMode);
    }
  }
  function handleLogout(): void {
    if ((window as any).auth && (window as any).auth.logout) {
      (window as any).auth.logout();
      window.location.href = '/';
    }
  }
  
  function toggleFriendOnlyMode(): void {
    showFriendsPostsOnly = !showFriendsPostsOnly;
    
    const buttonText = showFriendsPostsOnly ? 'Ver todas las publicaciones' : 'Ver solo amigos';
    
    if (toggleFriendMode) {
      toggleFriendMode.textContent = buttonText;
    }
    
    if (mobileToggleFriendMode) {
      mobileToggleFriendMode.textContent = buttonText;
    }
    
    loadPosts();
  }
  
  function setupPostModal(): void {
    // Configurar modal para crear post
    if (postModal && submitPostBtn && postContent) {
      // Configurar botón de cierre
      const closePostModal = document.getElementById('closePostModal');
      if (closePostModal) {
        closePostModal.addEventListener('click', () => {
          postModal!.classList.add('hidden');
        });
      }
      
      // Configurar botón de enviar
      submitPostBtn.addEventListener('click', submitPost);
    }
  }
  
  async function submitPost(): Promise<void> {
    if (!postContent || !postModal) return;
    
    const content = postContent.value.trim();
    if (!content) {
      alert('La publicación no puede estar vacía');
      return;
    }
    
    try {
      // Crear objeto de post con contenido e imagen (si existe)
      const postData: any = { content };
      if (imageBase64) {
        postData.image = imageBase64;
      }
      
      // @ts-ignore
      await window.posts.create(postData);
      
      // Limpiar formulario y cerrar modal
      postContent.value = '';
      imageBase64 = null;
      postModal.classList.add('hidden');
      
      // Recargar posts
      loadPosts();
    } catch (error) {
      console.error('Error al crear post:', error);
      alert('Error al crear la publicación');
    }
  }
  
  function updateUserImages(): void {
    const userImages = document.querySelectorAll('.user-profile-image');
    const userInitials = document.querySelectorAll('.user-initials');
    
    if (currentUser) {
      // Actualizar todas las imágenes de usuario
      userImages.forEach((img: Element) => {
        const imgElement = img as HTMLImageElement;
        if (currentUser.profilePicture) {
          imgElement.src = currentUser.profilePicture;
          imgElement.style.display = 'block';
        } else {
          imgElement.style.display = 'none';
        }
      });
      
      // Actualizar iniciales en caso de no tener imagen
      userInitials.forEach((div: Element) => {
        if (!currentUser.profilePicture) {
          const divElement = div as HTMLElement;
          divElement.style.display = 'flex';
          
          // Generar iniciales (primeras letras del nombre)
          const nameParts = currentUser.name.split(' ');
          let initials = '';
          
          if (nameParts.length >= 2) {
            initials = nameParts[0][0] + nameParts[1][0];
          } else if (nameParts.length === 1) {
            initials = nameParts[0][0];
          } else {
            initials = 'U';
          }
          
          divElement.textContent = initials.toUpperCase();
        } else {
          const divElement = div as HTMLElement;
          divElement.style.display = 'none';
        }
      });
    }
  }
  
  async function loadFriends(): Promise<void> {
    try {
      // @ts-ignore
      if (!window.friends?.getFriends) {
        console.error('La función friends.getFriends no está disponible');
        return;
      }
      const friends = await (window as any).friends.getFriends();
      
      // Actualizar lista de amigos (implementación básica)
      if (friendsContainer) {
        friendsContainer.innerHTML = '';
        
        if (friends.length === 0) {
          friendsContainer.innerHTML = '<li class="text-center text-gray-500 py-2">No tienes contactos todavía</li>';
          return;
        }
        
        friends.forEach((friend: { name: string; profilePicture?: string }) => {
          const friendItem = document.createElement('li');
          friendItem.className = 'flex items-center p-2 rounded-lg hover:bg-purple-50 transition-colors';
          
          friendItem.innerHTML = `
            <div class="relative h-10 w-10 rounded-full overflow-hidden flex-shrink-0 mr-3 shadow-md">
              <img src="${friend.profilePicture || '/images/avatar-placeholder.png'}" alt="${friend.name}" class="h-full w-full object-cover">
            </div>
            <span class="text-sm font-medium text-gray-700">${friend.name}</span>
          `;
          
          friendsContainer!.appendChild(friendItem);
        });
      }
      
      // Actualizar lista móvil de amigos
      if (mobileFriendsContainer) {
        mobileFriendsContainer.innerHTML = '';
        
        if (friends.length === 0) {
          mobileFriendsContainer.innerHTML = '<div class="text-center text-gray-500 py-2 w-full">No tienes contactos todavía</div>';
          return;
        }
        
        friends.forEach((friend: { name: string; profilePicture?: string }) => {
          const friendItem = document.createElement('div');
          friendItem.className = 'flex-shrink-0 text-center';
          
          friendItem.innerHTML = `
            <div class="relative h-12 w-12 rounded-full overflow-hidden shadow-md mx-auto mb-1">
              <img src="${friend.profilePicture || '/images/avatar-placeholder.png'}" alt="${friend.name}" class="h-full w-full object-cover">
            </div>
            <span class="text-xs font-medium text-gray-700 block truncate w-16">${friend.name.split(' ')[0]}</span>
          `;
          
          mobileFriendsContainer!.appendChild(friendItem);
        });
      }
    } catch (error) {
      console.error('Error al cargar amigos:', error);
    }
  }
  
  function processPosts(posts: any[]): void {
    if (!postsContainer) return;
    
    // Limpiar contenedor actual excepto el indicador de carga
    const children = Array.from(postsContainer.children);
    children.forEach(child => {
      if (child.id !== 'loadingPosts') {
        child.remove();
      }
    });
    
    // Mostrar mensaje si no hay posts
    if (!posts || posts.length === 0) {
      const noPostsMessage = document.createElement('div');
      noPostsMessage.className = 'bg-white/80 backdrop-blur-sm rounded-xl shadow-lg p-6 text-center border border-purple-100';
      noPostsMessage.innerHTML = `
        <svg class="h-12 w-12 mx-auto text-purple-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
        </svg>
        <h3 class="mt-2 text-gray-700 font-medium">No hay publicaciones para mostrar</h3>
        <p class="text-gray-500 text-sm mt-1">¡Sé el primero en crear una publicación!</p>
      `;
      postsContainer.appendChild(noPostsMessage);
      return;
    }
    
    // Renderizar los posts
    posts.forEach(post => renderPost(post));
  }
  
  function renderPost(post: any): void {
    if (!postsContainer) return;
    
    // Crear elemento de post
    const postElement = document.createElement('div');
    postElement.className = 'bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-purple-100 overflow-hidden';
    postElement.dataset.postId = post._id;
    
    // Formatear fecha
    const postDate = new Date(post.createdAt);
    const timeAgo = formatRelativeTime(postDate);
    
    // Generar HTML del post
    postElement.innerHTML = `
      <div class="p-4">
        <div class="flex items-start space-x-3">
          <div class="relative h-10 w-10 rounded-full overflow-hidden flex-shrink-0">
            <img src="${post.user.profilePicture || '/images/avatar-placeholder.png'}" alt="${post.user.name}" class="h-full w-full object-cover">
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-semibold text-gray-900">${post.user.name}</p>
            <p class="text-xs text-gray-500">${timeAgo}</p>
            <div class="mt-2 text-gray-800 whitespace-pre-wrap break-words">${post.content}</div>
            ${post.image ? `<img src="${post.image}" alt="Imagen de publicación" class="mt-3 rounded-lg max-h-96 w-auto">` : ''}
          </div>
        </div>
      </div>
      
      <div class="flex items-center bg-gray-50 px-4 py-2 border-t border-gray-100">
        <button class="flex items-center space-x-1 text-gray-600 hover:text-blue-600 transition-colors like-btn" data-post-id="${post._id}">
          <svg class="h-5 w-5 ${post.likes.includes(currentUser?._id) ? 'text-blue-600 fill-current' : ''}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905v.714c0 .596-.329 1.142-.86 1.42L7 8" />
          </svg>
          <span class="text-sm like-count">${post.likes.length}</span>
        </button>
        
        <button class="flex items-center space-x-1 text-gray-600 hover:text-purple-600 transition-colors ml-4 comment-btn" data-post-id="${post._id}">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
          <span class="text-sm">${post.comments.length}</span>
        </button>
      </div>
    `;
    
    // Añadir el post al contenedor
    postsContainer.appendChild(postElement);
    
    // Configurar eventos de los botones del post
    setupPostButtons(postElement, post);
  }
  
  function formatRelativeTime(date: Date): string {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    
    if (diffInSeconds < 60) {
      return 'Hace un momento';
    }
    
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) {
      return `Hace ${diffInMinutes} ${diffInMinutes === 1 ? 'minuto' : 'minutos'}`;
    }
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) {
      return `Hace ${diffInHours} ${diffInHours === 1 ? 'hora' : 'horas'}`;
    }
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 30) {
      return `Hace ${diffInDays} ${diffInDays === 1 ? 'día' : 'días'}`;
    }
    
    const diffInMonths = Math.floor(diffInDays / 30);
    if (diffInMonths < 12) {
      return `Hace ${diffInMonths} ${diffInMonths === 1 ? 'mes' : 'meses'}`;
    }
    
    const diffInYears = Math.floor(diffInMonths / 12);
    return `Hace ${diffInYears} ${diffInYears === 1 ? 'año' : 'años'}`;
  }
  
  function setupPostButtons(postElement: HTMLElement, post: any): void {
    // Configurar botón de like
    const likeBtn = postElement.querySelector('.like-btn');
    if (likeBtn) {
      likeBtn.addEventListener('click', () => handleLike(post._id));
    }
    
    // Configurar botón de comentario
    const commentBtn = postElement.querySelector('.comment-btn');
    if (commentBtn) {
      commentBtn.addEventListener('click', () => openCommentModal(post));
    }
  }
  
  async function handleLike(postId: string): Promise<void> {
    try {
      // @ts-ignore
      await window.posts.like(postId);
      // Recargar posts para mostrar el nuevo estado
      loadPosts();
    } catch (error) {
      console.error('Error al dar like:', error);
    }
  }
  
  function openCommentModal(post: any): void {
    selectedPostId = post._id;
    
    const commentModal = document.getElementById('commentModal');
    if (!commentModal) return;
    
    // Configurar datos del post en el modal
    const authorName = commentModal.querySelector('#commentModalAuthorName');
    const authorImg = commentModal.querySelector('#commentModalAuthorImg') as HTMLImageElement;
    const authorInitials = commentModal.querySelector('#commentModalAuthorInitials') as HTMLElement;
    const modalDate = commentModal.querySelector('#commentModalDate');
    const modalContent = commentModal.querySelector('#commentModalContent');
    const modalImage = commentModal.querySelector('#commentModalImage') as HTMLImageElement;
    const modalImageContainer = commentModal.querySelector('#commentModalImageContainer');
    
    if (authorName) authorName.textContent = post.user.name;
    
    if (authorImg && authorInitials) {
      if (post.user.profilePicture) {
        authorImg.src = post.user.profilePicture;
        authorImg.style.display = 'block';
        authorInitials.style.display = 'none';
      } else {
        authorImg.style.display = 'none';
        authorInitials.style.display = 'flex';
        
        // Generar iniciales
        const nameParts = post.user.name.split(' ');
        let initials = nameParts[0][0];
        if (nameParts.length > 1) {
          initials += nameParts[1][0];
        }
        authorInitials.textContent = initials.toUpperCase();
      }
    }
    
    if (modalDate) modalDate.textContent = formatRelativeTime(new Date(post.createdAt));
    if (modalContent) modalContent.textContent = post.content;
    
    // Mostrar imagen si existe
    if (modalImage && modalImageContainer) {
      if (post.image) {
        modalImage.src = post.image;
        modalImageContainer.classList.remove('hidden');
      } else {
        modalImageContainer.classList.add('hidden');
      }
    }
    
    // Configurar el botón de enviar comentario
    setupCommentForm();
    
    // Cargar comentarios
    loadComments();
    
    // Mostrar el modal
    commentModal.classList.remove('hidden');
  }
  
  // Configurar formulario de comentarios
  function setupCommentForm(): void {
    const submitCommentBtn = document.getElementById('submitCommentBtn');
    const commentInput = document.getElementById('commentInput') as HTMLInputElement;
    const commentSubmitLoading = document.getElementById('commentSubmitLoading');
    const commentModal = document.getElementById('commentModal');
    const closeCommentModal = document.getElementById('closeCommentModal');
    
    if (!submitCommentBtn || !commentInput || !commentSubmitLoading || !commentModal || !closeCommentModal) {
      console.error('Elementos del formulario de comentarios no encontrados');
      return;
    }
    
    // Limpiar el formulario
    commentInput.value = '';
    
    // Eliminar eventos anteriores para evitar duplicados
    const newSubmitBtn = submitCommentBtn.cloneNode(true);
    submitCommentBtn.parentNode?.replaceChild(newSubmitBtn, submitCommentBtn);
    
    const newCloseBtn = closeCommentModal.cloneNode(true);
    closeCommentModal.parentNode?.replaceChild(newCloseBtn, closeCommentModal);
    
    // Configurar nuevo evento de envío
    newSubmitBtn.addEventListener('click', submitComment);
    
    // Configurar evento de tecla Enter
    commentInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        submitComment();
      }
    });
    
    // Configurar cerrar modal
    newCloseBtn.addEventListener('click', () => {
      commentModal.classList.add('hidden');
    });
  }
  
  // Enviar un comentario
  async function submitComment(): Promise<void> {
    if (!selectedPostId) return;
    
    const commentInput = document.getElementById('commentInput') as HTMLInputElement;
    const commentSubmitLoading = document.getElementById('commentSubmitLoading');
    const submitCommentBtn = document.getElementById('submitCommentBtn');
    
    if (!commentInput || !commentSubmitLoading || !submitCommentBtn) return;
    
    const content = commentInput.value.trim();
    if (!content) {
      alert('El comentario no puede estar vacío');
      return;
    }
    
    try {
      // Mostrar cargando y deshabilitar botón
      commentSubmitLoading.classList.remove('hidden');
      submitCommentBtn.setAttribute('disabled', 'true');
      commentInput.setAttribute('disabled', 'true');
      
      console.log(`Enviando comentario al post ${selectedPostId}: "${content}"`);
      
      // Verificar que la API de posts esté disponible
      if (!(window as any).posts || !(window as any).posts.comment) {
        throw new Error("La API de comentarios no está disponible");
      }
      
      // Enviar comentario
      await (window as any).posts.comment(selectedPostId, content);
      
      // Limpiar el formulario
      commentInput.value = '';
      
      // Recargar comentarios para mostrar el nuevo
      loadComments();
    } catch (error) {
      console.error('Error al enviar comentario:', error);
      alert('Error al enviar el comentario. Intenta nuevamente.');
    } finally {
      // Ocultar cargando y habilitar botón
      commentSubmitLoading.classList.add('hidden');
      submitCommentBtn.removeAttribute('disabled');
      commentInput.removeAttribute('disabled');
    }
  }
  
  async function loadComments(): Promise<void> {
    if (!selectedPostId) return;
    
    const commentsList = document.getElementById('commentsList');
    const commentsLoading = document.getElementById('commentsLoading');
    const noCommentsMessage = document.getElementById('noCommentsMessage');
    
    if (!commentsList || !commentsLoading || !noCommentsMessage) return;
    
    // Mostrar cargando
    commentsLoading.classList.remove('hidden');
    noCommentsMessage.classList.add('hidden');
    
    // Limpiar comentarios existentes excepto los elementos de estado
    const children = Array.from(commentsList.children);
    children.forEach(child => {
      if (child !== commentsLoading && child !== noCommentsMessage) {
        child.remove();
      }
    });
    
    try {
      console.log(`Intentando cargar comentarios para el post: ${selectedPostId}`);
      
      // Verificar que la API de posts esté disponible
      if (!(window as any).posts || !(window as any).posts.getComments) {
        throw new Error("La API de comentarios no está disponible");
      }
      
      const comments = await (window as any).posts.getComments(selectedPostId);
      console.log('Comentarios recibidos:', comments);
      
      // Ocultar cargando
      commentsLoading.classList.add('hidden');
      
      // Mostrar mensaje si no hay comentarios
      if (!comments || comments.length === 0) {
        noCommentsMessage.classList.remove('hidden');
        return;
      }
      
      // Mostrar comentarios recibidos
      comments.forEach((comment: {
        user: {
          profilePicture?: string;
          name: string;
        };
        content: string;
        createdAt: string;
      }) => {
        // Validar que el comentario tiene la estructura esperada
        if (!comment || !comment.user) {
          console.error('Comentario con formato inválido:', comment);
          return;
        }
        
        const commentElement = document.createElement('div');
        commentElement.className = 'flex space-x-2 animate-fadeIn';
        
        // Asegurar que se muestran correctamente los caracteres especiales
        const userName = comment.user.name || 'Usuario';
        const content = comment.content || 'Sin contenido';
        
        commentElement.innerHTML = `
          <div class="relative h-8 w-8 rounded-full overflow-hidden flex-shrink-0">
            <img src="${comment.user.profilePicture || '/images/avatar-placeholder.png'}" alt="${userName}" class="h-full w-full object-cover">
          </div>
          <div class="flex-1 bg-gray-100 p-2 rounded-lg">
            <p class="text-xs font-semibold">${userName}</p>
            <p class="text-sm">${content}</p>
            <p class="text-xs text-gray-500 mt-1">${formatRelativeTime(new Date(comment.createdAt))}</p>
          </div>
        `;
        
        commentsList.appendChild(commentElement);
      });
    } catch (error) {
      console.error('Error al cargar comentarios:', error);
      commentsLoading.classList.add('hidden');
      
      // Mostrar mensaje de error
      const errorElement = document.createElement('div');
      errorElement.className = 'text-center text-red-500 py-3';
      errorElement.textContent = 'Error al cargar los comentarios. Intenta nuevamente.';
      commentsList.appendChild(errorElement);
      
      // Añadir botón para intentar de nuevo
      const retryButton = document.createElement('button');
      retryButton.className = 'mx-auto block mt-2 bg-purple-100 hover:bg-purple-200 text-purple-700 font-semibold py-1 px-4 rounded-lg text-sm transition-colors';
      retryButton.textContent = 'Intentar nuevamente';
      retryButton.onclick = () => loadComments();
      commentsList.appendChild(retryButton);
    }
  }
</script> 