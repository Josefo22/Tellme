---
import Layout from '../layouts/Layout.astro';
import LoadingTransition from '../components/LoadingTransition.astro';
---

<LoadingTransition />
<Layout title="TellMe - Perfil">
  <div class="min-h-screen bg-gradient-to-br from-purple-100 via-pink-50 to-indigo-100">
    <nav class="bg-white shadow-md fixed w-full top-0 z-50 border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4">
          <div class="flex justify-between items-center h-14">
            <div class="flex items-center">
              <a href="/feed" class="text-2xl font-bold text-blue-600">TellMe</a>
              <div class="ml-4 relative">
                <input 
                  type="text" 
                  placeholder="Buscar en TellMe" 
                  class="bg-gray-100 rounded-full py-1.5 pl-9 pr-3 text-sm w-60 focus:outline-none"
                >
                <svg class="h-4 w-4 text-gray-500 absolute left-3 top-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>
            
            <div class="flex items-center space-x-1">
              <a href="/profile" class="p-2 rounded-full hover:bg-gray-200 transition-colors">
                <span class="sr-only">Perfil</span>
                <svg class="h-6 w-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </a>
              <button id="logoutBtn" class="p-2 rounded-full hover:bg-gray-200 transition-colors">
                <svg class="h-6 w-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </nav>

    <!-- Main Content -->
    <main class="pt-20 pb-8">
      <div class="max-w-2xl mx-auto px-4 sm:px-6">
        <!-- Profile Header -->
        <div class="bg-white/80 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-white/20 mb-6">
          <div class="flex items-center space-x-4">
            <div class="h-20 w-20 rounded-xl bg-gradient-to-br from-purple-400 to-indigo-400"></div>
            <div>
              <h1 id="userName" class="text-2xl font-bold text-gray-800">Cargando...</h1>
              <p id="userEmail" class="text-gray-600">cargando@email.com</p>
            </div>
          </div>
        </div>

        <!-- Profile Stats -->
        <div class="grid grid-cols-3 gap-4 mb-6">
          <div class="bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-white/20 text-center">
            <p class="text-2xl font-bold text-purple-600" id="postsCount">0</p>
            <p class="text-sm text-gray-600">Publicaciones</p>
          </div>
          <div class="bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-white/20 text-center">
            <p class="text-2xl font-bold text-purple-600" id="likesCount">0</p>
            <p class="text-sm text-gray-600">Me gusta</p>
          </div>
          <div class="bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-white/20 text-center">
            <p class="text-2xl font-bold text-purple-600" id="commentsCount">0</p>
            <p class="text-sm text-gray-600">Comentarios</p>
          </div>
        </div>

        <!-- Timeline al estilo Facebook -->
        <div class="bg-white rounded-xl shadow-sm p-4 mb-4">
          <h2 class="text-xl font-semibold mb-4">Publicaciones</h2>
          
          <!-- Formulario para crear nueva publicación -->
          <div class="mb-6 p-4 bg-gray-50 rounded-lg">
            <textarea 
              id="newPostContent"
              class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-400"
              placeholder="¿Qué estás pensando?"
              rows="3"
            ></textarea>
            <div class="flex justify-between items-center mt-2">
              <div class="flex items-center gap-3">
                <button class="text-gray-500 hover:text-gray-700">
                  <span class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    Foto
                  </span>
                </button>
              </div>
              <button 
                id="createPostBtn"
                class="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium hover:opacity-90 transition-all"
              >
                Publicar
              </button>
            </div>
          </div>
          
          <!-- Lista de publicaciones -->
          <div id="userPosts" class="space-y-4">
            <!-- Las publicaciones se cargarán aquí mediante JavaScript -->
            <div class="text-center py-4 text-gray-500" id="loadingPosts">
              Cargando publicaciones...
            </div>
            <div class="hidden text-center py-4 text-gray-500" id="noPosts">
              No hay publicaciones para mostrar
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script>
   // @ts-ignore
   import { auth, posts, utils } from '../utils/api.js';

  // Verificar si el usuario está autenticado
  if (!utils.isAuthenticated()) {
    window.location.href = '/';
  }

  // Elementos del DOM
  const logoutBtn = document.getElementById('logoutBtn');
  const userName = document.getElementById('userName');
  const userEmail = document.getElementById('userEmail');
  const postsCount = document.getElementById('postsCount');
  const likesCount = document.getElementById('likesCount');
  const commentsCount = document.getElementById('commentsCount');
  const userPostsContainer = document.getElementById('userPosts');
  const loadingPosts = document.getElementById('loadingPosts');
  const noPosts = document.getElementById('noPosts');

  // Cargar datos del usuario
  const loadUserData = async () => {
    try {
      console.log('Cargando datos del usuario...');
      // Usar la función de la API para obtener los datos del usuario
      const user = await auth.getCurrentUser();
      console.log('Datos del usuario cargados:', user);
      
      if (userName) userName.textContent = user.name;
      if (userEmail) userEmail.textContent = user.email;
    } catch (error) {
      console.error('Error al cargar datos del usuario:', error);
      
      // Usar datos de ejemplo cuando hay error
      console.log('Usando datos de ejemplo para el usuario');
      if (userName) userName.textContent = 'Usuario de Ejemplo';
      if (userEmail) userEmail.textContent = 'usuario@ejemplo.com';
      
      // Mostrar mensaje de error más descriptivo
      const errorMessage = document.createElement('div');
      errorMessage.className = 'bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mt-4';
      errorMessage.innerHTML = `
        <strong class="font-bold">Modo de demostración:</strong>
        <span class="block sm:inline"> No se pudo conectar con el servidor. Se están mostrando datos de ejemplo.</span>
        <p class="text-sm mt-2">Asegúrate de que el backend esté ejecutándose en http://localhost:5000 y que las rutas de la API estén correctamente configuradas.</p>
      `;
      
      const profileHeader = document.querySelector('.bg-white\\/80.backdrop-blur-sm.p-6.rounded-2xl');
      if (profileHeader) {
        profileHeader.appendChild(errorMessage);
      }
    }
  };

  // Cargar estadísticas del usuario
  const loadUserStats = async () => {
    try {
      console.log('Cargando estadísticas del usuario...');
      // Usar la función de la API para obtener las estadísticas
      const stats = await posts.getUserStats();
      console.log('Estadísticas cargadas:', stats);
      
      if (postsCount) postsCount.textContent = stats.posts.toString();
      if (likesCount) likesCount.textContent = stats.likes.toString();
      if (commentsCount) commentsCount.textContent = stats.comments.toString();
    } catch (error) {
      console.error('Error al cargar estadísticas:', error);
      
      // Usar datos de ejemplo cuando hay error
      console.log('Usando datos de ejemplo para las estadísticas');
      if (postsCount) postsCount.textContent = '5';
      if (likesCount) likesCount.textContent = '12';
      if (commentsCount) commentsCount.textContent = '8';
    }
  };

  // Cargar posts del usuario
  const loadUserPosts = async () => {
    const userPostsContainer = document.getElementById('userPosts');
    const loadingPosts = document.getElementById('loadingPosts');
    const noPosts = document.getElementById('noPosts');
    
    if (!userPostsContainer || !loadingPosts || !noPosts) return;
    
    try {
      const userPosts = await posts.getUserPosts();
      
      // Ocultar loader
      loadingPosts.classList.add('hidden');
      
      // Si no hay posts, mostrar mensaje
      if (userPosts.length === 0) {
        noPosts.classList.remove('hidden');
        return;
      }
      
      // Limpiar contenedor
      userPostsContainer.innerHTML = '';
      
      // Renderizar posts
      userPosts.forEach((post: any) => {
        const postDate = new Date(post.createdAt).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        
        const postElement = document.createElement('div');
        postElement.className = 'bg-white border border-gray-200 rounded-lg p-4 mb-4';
        postElement.innerHTML = `
          <div class="flex items-center mb-3">
            <img src="${post.user.profilePicture || '/images/avatar-placeholder.png'}" 
                alt="${post.user.name}" 
                class="w-10 h-10 rounded-full object-cover mr-3">
            <div>
              <p class="font-semibold">${post.user.name}</p>
              <p class="text-xs text-gray-500">${postDate}</p>
            </div>
          </div>
          <p class="mb-3">${post.content}</p>
          ${post.image ? `<img src="${post.image}" alt="Post image" class="w-full h-auto rounded-lg mb-3">` : ''}
          <div class="flex items-center justify-between text-sm text-gray-500 pt-2 border-t border-gray-100">
            <div class="flex items-center">
              <button class="flex items-center mr-4" data-post-id="${post._id}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                ${post.likes.length} Me gusta
              </button>
              <span class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                ${post.comments.length} Comentarios
              </span>
            </div>
          </div>
        `;
        
        userPostsContainer.appendChild(postElement);
      });
      
    } catch (error) {
      console.error('Error al cargar posts:', error);
      loadingPosts.classList.add('hidden');
      noPosts.textContent = 'Error al cargar las publicaciones';
      noPosts.classList.remove('hidden');
    }
  };

  // Agregar evento para crear nueva publicación
  document.getElementById('createPostBtn')?.addEventListener('click', async () => {
    const contentInput = document.getElementById('newPostContent') as HTMLTextAreaElement;
    if (!contentInput || !contentInput.value.trim()) return;
    
    try {
      const newPost = await posts.create({ content: contentInput.value });
      contentInput.value = '';
      
      // Recargar los posts
      loadUserPosts();
    } catch (error) {
      console.error('Error al crear publicación:', error);
      alert('No se pudo crear la publicación');
    }
  });

  // Cerrar sesión
  logoutBtn?.addEventListener('click', () => {
    auth.logout();
    window.location.href = '/';
  });

  // Cargar datos al iniciar
  console.log('Iniciando carga de datos...');
  loadUserData();
  loadUserStats();
  loadUserPosts();
</script> 