---
import Layout from '../layouts/Layout.astro';
import LoadingTransition from '../components/LoadingTransition.astro';
---

<LoadingTransition />
<Layout title="TellMe - Perfil">
  <div class="min-h-screen bg-gradient-to-br from-purple-100 via-pink-50 to-indigo-100">
     <!-- Navbar estilo modernizado -->
     <nav class="bg-white/80 backdrop-blur-sm shadow-lg fixed w-full top-0 z-50 border-b border-purple-100">
      <div class="max-w-7xl mx-auto px-4">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <h1 class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-indigo-600">TellMe</h1>
            <a href="/feed">
              <div class="ml-6 relative">
                <input 
                  type="text" 
                placeholder="Buscar en TellMe" 
                class="bg-purple-50 rounded-full py-2 pl-10 pr-4 text-sm w-64 focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all"
              >
              <svg class="h-4 w-4 text-purple-400 absolute left-3 top-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
          
          <div class="flex items-center space-x-3">
            <a href="/profile" class="p-2 rounded-full hover:bg-purple-100 transition-colors relative">
              <span class="sr-only">Perfil</span>
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span class="absolute top-0 right-0 h-2 w-2 bg-green-400 rounded-full"></span>
            </a>
            <button id="logoutBtn" class="p-2 rounded-full hover:bg-purple-100 transition-colors">
              <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="pt-20 pb-8">
      <div class="max-w-2xl mx-auto px-4 sm:px-6">
        <!-- Profile Header with Cover -->
        <div class="bg-white/80 backdrop-blur-sm p-6 rounded-2xl shadow-xl mb-6 border border-purple-100">
          <div class="relative">
            <!-- Foto de perfil y botones de acciÃ³n -->
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
              <div class="flex items-start mb-4 sm:mb-0">
                <div class="relative">
                  <div class="w-24 h-24 rounded-full bg-purple-100 relative overflow-hidden">
                    <img id="profilePictureImg" class="w-full h-full object-cover hidden" src="" alt="Foto de perfil">
                    <div id="profilePlaceholderIcon" class="w-full h-full flex items-center justify-center text-purple-400">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <button id="changeProfilePictureBtn" class="absolute bottom-0 right-0 bg-purple-600 text-white p-1 rounded-full hover:bg-purple-700 transition-colors">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                    </button>
                  </div>
                  <input type="file" id="profilePictureInput" class="hidden" accept="image/*">
                </div>
                <div class="ml-4">
                  <h1 class="text-xl sm:text-2xl font-bold text-purple-900" id="userName">Cargando...</h1>
                  <p class="text-sm text-gray-500" id="userEmail">usuario@ejemplo.com</p>
                  <button id="editProfileBtn" class="mt-2 text-sm text-purple-600 hover:text-purple-800 font-medium flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                    </svg>
                    Editar perfil
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Bio section with edit functionality -->
            <div class="bg-purple-50 p-4 rounded-xl mb-4 relative group">
              <div class="flex justify-between items-start">
                <h3 class="text-md font-semibold text-purple-900 mb-2">Biografia</h3>
                <button id="editBioDirectBtn" class="text-purple-600 hover:text-purple-800 opacity-0 group-hover:opacity-100 transition-opacity">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                  </svg>
                </button>
              </div>
              
              <div id="bioDisplayContainer" class="min-h-[60px]">
                <p id="userBio" class="text-gray-700 whitespace-pre-line">Cargando...</p>
              </div>
              
              <div id="bioEditContainer" class="hidden">
                <textarea id="quickEditBio" rows="3" class="w-full p-2 border border-purple-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-400 bg-white"></textarea>
                <div class="flex justify-end mt-2 space-x-2">
                  <button id="cancelBioEditBtn" class="px-3 py-1 text-sm border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors">
                    Cancelar
                  </button>
                  <button id="saveBioBtn" class="px-3 py-1 text-sm bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:opacity-90 transition-colors">
                    Guardar
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Modal para editar perfil -->
        <div id="editProfileModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 hidden">
          <div class="bg-white rounded-2xl p-6 w-full max-w-md mx-4 shadow-xl">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-semibold text-gray-800">Editar perfil</h3>
              <button id="closeProfileModal" class="text-gray-500 hover:text-gray-700">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div class="space-y-4">
              <div>
                <label for="editName" class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
                <input type="text" id="editName" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-400">
              </div>
            <div>
                <label for="editBio" class="block text-sm font-medium text-gray-700 mb-1">Biografia</label>
                <textarea id="editBio" rows="3" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-400"></textarea>
              </div>
              <div class="flex justify-center pt-2">
                <button id="saveProfileBtn" class="px-6 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium hover:opacity-90 transition-all">
                  Guardar cambios
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Profile Stats -->
        <div class="grid grid-cols-3 gap-4 mb-6">
          <div class="bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-white/20 text-center">
            <p class="text-2xl font-bold text-purple-600" id="postsCount">0</p>
            <p class="text-sm text-gray-600">Publicaciones</p>
          </div>
          <div class="bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-white/20 text-center">
            <p class="text-2xl font-bold text-purple-600" id="likesCount">0</p>
            <p class="text-sm text-gray-600">Me gusta</p>
          </div>
          <div class="bg-white/80 backdrop-blur-sm p-4 rounded-xl shadow-lg border border-white/20 text-center">
            <p class="text-2xl font-bold text-purple-600" id="commentsCount">0</p>
            <p class="text-sm text-gray-600">Comentarios</p>
          </div>
        </div>

        <!-- Timeline al estilo Facebook -->
        <div class="bg-white rounded-xl shadow-sm p-4 mb-4">
          <h2 class="text-xl font-semibold mb-4">Publicaciones</h2>
          
          <!-- Formulario para crear nueva publicaciÃ³n -->
          <div class="mb-6 p-4 bg-gray-50 rounded-lg">
            <textarea 
              id="newPostContent"
              class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-400"
              placeholder="Que hay de nuevo?"
              rows="3"
            ></textarea>
            <div class="flex justify-between items-center mt-2">
              <div class="flex items-center gap-3">
                <button class="text-gray-500 hover:text-gray-700">
                  <span class="flex items-center gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    Foto
                  </span>
                </button>
              </div>
              <button 
                id="createPostBtn"
                class="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium hover:opacity-90 transition-all"
              >
                Publicar
              </button>
            </div>
          </div>
          
          <!-- Lista de publicaciones -->
          <div id="userPosts" class="space-y-4">
            <!-- Las publicaciones se cargarÃ¡n aquÃ­ mediante JavaScript -->
            <div class="text-center py-4 text-gray-500" id="loadingPosts">
              Cargando publicaciones...
            </div>
            <div class="hidden text-center py-4 text-gray-500" id="noPosts">
              No hay publicaciones para mostrar
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script>
   // @ts-ignore
   import { auth, posts, utils, users } from '../utils/api.js';

  // Verificar si el usuario estÃ¡ autenticado
  if (!utils.isAuthenticated()) {
    window.location.href = '/';
  }

  // Elementos del DOM
  const logoutBtn = document.getElementById('logoutBtn');
  const userName = document.getElementById('userName');
  const userEmail = document.getElementById('userEmail');
  const userBio = document.getElementById('userBio');
  const bioDisplayContainer = document.getElementById('bioDisplayContainer');
  const bioEditContainer = document.getElementById('bioEditContainer');
  const quickEditBio = document.getElementById('quickEditBio') as HTMLTextAreaElement;
  const editBioDirectBtn = document.getElementById('editBioDirectBtn');
  const cancelBioEditBtn = document.getElementById('cancelBioEditBtn');
  const saveBioBtn = document.getElementById('saveBioBtn');
  const postsCount = document.getElementById('postsCount');
  const likesCount = document.getElementById('likesCount');
  const commentsCount = document.getElementById('commentsCount');
  const userPostsContainer = document.getElementById('userPosts');
  const loadingPosts = document.getElementById('loadingPosts');
  const noPosts = document.getElementById('noPosts');
  const profilePictureImg = document.getElementById('profilePictureImg') as HTMLImageElement;
  const profilePlaceholderIcon = document.getElementById('profilePlaceholderIcon');
  const changeProfilePictureBtn = document.getElementById('changeProfilePictureBtn');
  const profilePictureInput = document.getElementById('profilePictureInput') as HTMLInputElement;
  const editProfileBtn = document.getElementById('editProfileBtn');
  const editProfileModal = document.getElementById('editProfileModal');
  const closeProfileModal = document.getElementById('closeProfileModal');
  const editName = document.getElementById('editName') as HTMLInputElement;
  const editBio = document.getElementById('editBio') as HTMLTextAreaElement;
  const saveProfileBtn = document.getElementById('saveProfileBtn');

  // Variables para almacenar los datos del usuario
  let currentUser: any = null;

  // Cargar datos del usuario
  const loadUserData = async () => {
    try {
      console.log('Cargando datos del usuario...');
      // Usar la funciÃ³n de la API para obtener los datos del usuario
      const user = await auth.getCurrentUser();
      console.log('Datos del usuario cargados:', user);
      
      // Guardar el usuario actual
      currentUser = user;
      
      if (userName) userName.textContent = user.name;
      if (userEmail) userEmail.textContent = user.email;
      if (userBio) userBio.textContent = user.bio || 'No hay biografÃ­a';
      
      // Cargar foto de perfil si existe
      if (user.profilePicture && profilePictureImg) {
        // Asegurarnos de que la URL de la imagen sea completa
        let profileImageUrl = user.profilePicture;
        if (profileImageUrl.startsWith('/uploads/')) {
          profileImageUrl = `http://localhost:5000${profileImageUrl}`;
        }
        
        profilePictureImg.src = profileImageUrl;
        profilePictureImg.classList.remove('hidden');
        if (profilePlaceholderIcon) profilePlaceholderIcon.classList.add('hidden');
      }
      
      // Configurar datos iniciales del formulario de ediciÃ³n
      if (editName) editName.value = user.name || '';
      if (editBio) editBio.value = user.bio || '';
      if (quickEditBio) quickEditBio.value = user.bio || '';
      
    } catch (error) {
      console.error('Error al cargar datos del usuario:', error);
      
      // Usar datos de ejemplo cuando hay error
      console.log('Usando datos de ejemplo para el usuario');
      if (userName) userName.textContent = 'Usuario de Ejemplo';
      if (userEmail) userEmail.textContent = 'usuario@ejemplo.com';
      
      // Mostrar mensaje de error mÃ¡s descriptivo
      const errorMessage = document.createElement('div');
      errorMessage.className = 'bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mt-4';
      errorMessage.innerHTML = `
        <strong class="font-bold">Modo de demostraciÃ³n:</strong>
        <span class="block sm:inline"> No se pudo conectar con el servidor. Se estÃ¡n mostrando datos de ejemplo.</span>
        <p class="text-sm mt-2">AsegÃºrate de que el backend estÃ© ejecutÃ¡ndose en http://localhost:5000 y que las rutas de la API estÃ©n correctamente configuradas.</p>
      `;
      
      const profileHeader = document.querySelector('.bg-white\\/80.backdrop-blur-sm.p-6.rounded-2xl');
      if (profileHeader) {
        profileHeader.appendChild(errorMessage);
      }
    }
  };

  // Gestionar cambio de foto de perfil
  changeProfilePictureBtn?.addEventListener('click', () => {
    profilePictureInput?.click();
  });

  // Manejar la selecciÃ³n de archivo
  profilePictureInput?.addEventListener('change', async (event) => {
    const input = event.target as HTMLInputElement;
    const file = input.files?.[0];
    
    if (!file) return;
    
    // Verificar tamaÃ±o del archivo (mÃ¡ximo 2MB)
    if (file.size > 2 * 1024 * 1024) {
      alert('La imagen es demasiado grande. El tamaÃ±o mÃ¡ximo permitido es 2MB. Se redimensionarÃ¡ automÃ¡ticamente.');
    }
    
    // Verificar tipo de archivo
    if (!file.type.startsWith('image/')) {
      alert('Solo se permiten archivos de imagen.');
      return;
    }
    
    try {
      // Mostrar indicador de carga
      if (profilePictureImg) profilePictureImg.classList.add('opacity-50');
      
      // Crear una URL local temporal para la imagen y mostrarla inmediatamente
      const localImageUrl = URL.createObjectURL(file);
      if (profilePictureImg) {
        profilePictureImg.src = localImageUrl;
        profilePictureImg.classList.remove('hidden');
        if (profilePlaceholderIcon) profilePlaceholderIcon.classList.add('hidden');
      }
      
      // Redimensionar y comprimir la imagen antes de subirla
      const compressedImageFile = await compressAndResizeImage(file);
      
      try {
        console.log('Subiendo imagen al servidor...');
        
        // Intentar subir imagen procesada al servidor
        const result = await users.uploadProfilePicture(compressedImageFile);
        console.log('Respuesta del servidor:', result);
        
        // Si fue exitoso, actualizar la imagen con la URL del servidor
        if (result && result.profilePicture) {
          // Construir la URL completa con la URL base correcta
          const serverImageUrl = `http://localhost:5000${result.profilePicture}`;
          console.log('URL de la imagen en el servidor:', serverImageUrl);
          
          if (profilePictureImg) {
            // Reemplazar la URL local con la del servidor cuando la imagen se cargue
            const newImg = new Image();
            newImg.onload = () => {
              if (profilePictureImg) {
                profilePictureImg.src = serverImageUrl;
                profilePictureImg.classList.remove('opacity-50');
              }
            };
            newImg.onerror = () => {
              console.error('No se pudo cargar la imagen del servidor');
              // Mantener la imagen local si hay error al cargar desde el servidor
              if (profilePictureImg) profilePictureImg.classList.remove('opacity-50');
              
              // En caso de error, usar la imagen de placeholder
              if (profilePictureImg) profilePictureImg.src = '/images/avatar-placeholder.png';
            };
            newImg.src = serverImageUrl;
          }
        }
        
        // Actualizar el usuario actual
        currentUser = await auth.getCurrentUser();
        
      } catch (uploadError) {
        console.error('Error al subir la imagen al servidor:', uploadError);
        
        // Ya estamos mostrando la imagen local, solo quitamos el indicador de carga
        if (profilePictureImg) profilePictureImg.classList.remove('opacity-50');
        
        // Mostrar mensaje de error, pero la imagen local ya estÃ¡ visible
        alert('No se pudo guardar la imagen en el servidor, pero se muestra localmente. Por favor, intÃ©ntalo de nuevo mÃ¡s tarde.');
      }
    } catch (error) {
      console.error('Error al procesar la imagen:', error);
      alert('No se pudo procesar la imagen. Por favor, intÃ©ntalo de nuevo.');
      
      if (profilePictureImg) profilePictureImg.classList.remove('opacity-50');
    }
  });

  // FunciÃ³n para comprimir y redimensionar la imagen
  const compressAndResizeImage = (file: File): Promise<File> => {
    return new Promise((resolve, reject) => {
      try {
        const img = new Image();
        const reader = new FileReader();
        
        reader.onload = (e) => {
          img.src = e.target?.result as string;
          
          img.onload = () => {
            // Crear un canvas para redimensionar la imagen
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // Calcular el nuevo tamaÃ±o (mÃ¡ximo 800px en cualquier dimensiÃ³n para fotos de perfil)
            let width = img.width;
            let height = img.height;
            const maxDimension = 800;
            
            if (width > height && width > maxDimension) {
              height = Math.round(height * (maxDimension / width));
              width = maxDimension;
            } else if (height > maxDimension) {
              width = Math.round(width * (maxDimension / height));
              height = maxDimension;
            }
            
            // Establecer dimensiones del canvas
            canvas.width = width;
            canvas.height = height;
            
            // Dibujar la imagen redimensionada
            ctx?.drawImage(img, 0, 0, width, height);
            
            // Obtener la imagen como data URL con calidad reducida (0.8 = 80%)
            canvas.toBlob((blob) => {
              if (!blob) {
                reject(new Error('Error al comprimir la imagen'));
                return;
              }
              
              // Crear un nuevo archivo con el blob
              const compressedFile = new File([blob], file.name, {
                type: file.type,
                lastModified: Date.now(),
              });
              
              console.log('Imagen original:', Math.round(file.size / 1024), 'KB');
              console.log('Imagen comprimida:', Math.round(compressedFile.size / 1024), 'KB');
              
              resolve(compressedFile);
            }, file.type, 0.8);
          };
        };
        
        reader.onerror = () => {
          reject(new Error('Error al leer el archivo'));
        };
        
        reader.readAsDataURL(file);
      } catch (error) {
        reject(error);
      }
    });
  };

  // Gestionar modal de ediciÃ³n de perfil
  editProfileBtn?.addEventListener('click', () => {
    if (editProfileModal) editProfileModal.classList.remove('hidden');
  });

  closeProfileModal?.addEventListener('click', () => {
    if (editProfileModal) editProfileModal.classList.add('hidden');
  });

  // Guardar cambios del perfil
  saveProfileBtn?.addEventListener('click', async () => {
    if (!editName?.value.trim()) {
      alert('El nombre no puede estar vacÃ­o');
      return;
    }
    
    try {
      // Mostrar indicador de carga
      if (saveProfileBtn) {
        saveProfileBtn.textContent = 'Guardando...';
        (saveProfileBtn as HTMLButtonElement).disabled = true;
      }
      
      // Actualizar perfil
      const updatedProfile = await users.updateProfile({
        name: editName?.value,
        bio: editBio?.value
      });
      
      // Actualizar UI
      if (userName) userName.textContent = updatedProfile.name;
      if (userBio) userBio.textContent = updatedProfile.bio || 'No hay biografÃ­a';
      
      // Cerrar modal
      if (editProfileModal) editProfileModal.classList.add('hidden');
      
      // Recargar datos del usuario
      currentUser = updatedProfile;
      
    } catch (error) {
      console.error('Error al actualizar perfil:', error);
      alert('No se pudo actualizar el perfil. Por favor, intÃ©ntalo de nuevo.');
    } finally {
      // Restaurar botÃ³n
      if (saveProfileBtn) {
        saveProfileBtn.textContent = 'Guardar cambios';
        (saveProfileBtn as HTMLButtonElement).disabled = false;
      }
    }
  });

  // Gestionar ediciÃ³n rÃ¡pida de biografÃ­a
  editBioDirectBtn?.addEventListener('click', () => {
    if (bioDisplayContainer && bioEditContainer && quickEditBio && currentUser) {
      bioDisplayContainer.classList.add('hidden');
      bioEditContainer.classList.remove('hidden');
      quickEditBio.value = currentUser.bio || '';
      quickEditBio.focus();
    }
  });

  // Cancelar ediciÃ³n de biografÃ­a
  cancelBioEditBtn?.addEventListener('click', () => {
    if (bioDisplayContainer && bioEditContainer) {
      bioDisplayContainer.classList.remove('hidden');
      bioEditContainer.classList.add('hidden');
    }
  });

  // Guardar cambios rÃ¡pidos de biografÃ­a
  saveBioBtn?.addEventListener('click', async () => {
    if (!quickEditBio) return;
    
    try {
      // Mostrar indicador de carga
      if (saveBioBtn) {
        saveBioBtn.textContent = 'Guardando...';
        (saveBioBtn as HTMLButtonElement).disabled = true;
      }
      
      // Actualizar perfil con solo el cambio de bio
      const updatedProfile = await users.updateProfile({
        name: currentUser?.name,
        bio: quickEditBio.value
      });
      
      // Actualizar UI
      if (userBio) userBio.textContent = updatedProfile.bio || 'No hay biografÃ­a';
      if (editBio) editBio.value = updatedProfile.bio || '';
      
      // Ocultar editor
      if (bioDisplayContainer && bioEditContainer) {
        bioDisplayContainer.classList.remove('hidden');
        bioEditContainer.classList.add('hidden');
      }
      
      // Actualizar usuario actual
      currentUser = updatedProfile;
      
    } catch (error) {
      console.error('Error al actualizar biografÃ­a:', error);
      alert('No se pudo actualizar la biografÃ­a. Por favor, intÃ©ntalo de nuevo.');
    } finally {
      // Restaurar botÃ³n
      if (saveBioBtn) {
        saveBioBtn.textContent = 'Guardar';
        (saveBioBtn as HTMLButtonElement).disabled = false;
      }
    }
  });

  // Cargar estadÃ­sticas del usuario
  const loadUserStats = async () => {
    try {
      console.log('Cargando estadÃ­sticas del usuario...');
      // Usar la funciÃ³n de la API para obtener las estadÃ­sticas
      const stats = await posts.getUserStats();
      console.log('EstadÃ­sticas cargadas:', stats);
      
      if (postsCount) postsCount.textContent = stats.posts.toString();
      if (likesCount) likesCount.textContent = stats.likes.toString();
      if (commentsCount) commentsCount.textContent = stats.comments.toString();
    } catch (error) {
      console.error('Error al cargar estadÃ­sticas:', error);
      
      // Usar datos de ejemplo cuando hay error
      console.log('Usando datos de ejemplo para las estadÃ­sticas');
      if (postsCount) postsCount.textContent = '5';
      if (likesCount) likesCount.textContent = '12';
      if (commentsCount) commentsCount.textContent = '8';
    }
  };

  // Cargar posts del usuario
  const loadUserPosts = async () => {
    const userPostsContainer = document.getElementById('userPosts');
    const loadingPosts = document.getElementById('loadingPosts');
    const noPosts = document.getElementById('noPosts');
    
    if (!userPostsContainer || !loadingPosts || !noPosts) return;
    
    try {
      // Intentar obtener las publicaciones del usuario
      const userPosts = await posts.getUserPosts();
      
      // Ocultar loader
        loadingPosts.classList.add('hidden');
      
      // Si no hay posts, mostrar mensaje
      if (!userPosts || userPosts.length === 0) {
        noPosts.classList.remove('hidden');
        return;
      }
      
      // Limpiar contenedor
      userPostsContainer.innerHTML = '';
      
      // Renderizar posts
      userPosts.forEach((post: any) => {
        const postDate = new Date(post.createdAt).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        
        // Asegurarnos de que la URL de la imagen de perfil sea completa
        let profileImageUrl = post.user.profilePicture || '/images/avatar-placeholder.png';
        if (profileImageUrl && profileImageUrl.startsWith('/uploads/')) {
          profileImageUrl = `http://localhost:5000${profileImageUrl}`;
        }
        
        const postElement = document.createElement('div');
        postElement.className = 'bg-white border border-gray-200 rounded-lg p-4 mb-4';
        postElement.innerHTML = `
          <div class="flex items-center mb-3">
            <img src="${profileImageUrl}" 
                alt="${post.user.name}" 
                class="w-10 h-10 rounded-full object-cover mr-3">
            <div>
              <p class="font-semibold">${post.user.name}</p>
              <p class="text-xs text-gray-500">${postDate}</p>
            </div>
          </div>
          <p class="mb-3">${post.content}</p>
          ${post.image ? `<img src="http://localhost:5000${post.image}" alt="Post image" class="w-full h-auto rounded-lg mb-3">` : ''}
          <div class="flex items-center justify-between text-sm text-gray-500 pt-2 border-t border-gray-100">
            <div class="flex items-center">
              <button class="flex items-center mr-4" data-post-id="${post._id}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                ${post.likes.length} Me gusta
              </button>
              <span class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                ${post.comments.length} Comentarios
              </span>
            </div>
          </div>
        `;
        
        userPostsContainer.appendChild(postElement);
      });
      
    } catch (error) {
      console.error('Error al cargar posts:', error);
      
      // Crear posts de muestra para mostrar
        loadingPosts.classList.add('hidden');
      
      // Mostrar mensaje de error pero con contenido de ejemplo
        userPostsContainer.innerHTML = '';
      
      // AÃ±adir mensaje de error
      const errorMessage = document.createElement('div');
      errorMessage.className = 'bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4';
      errorMessage.innerHTML = `
        <strong class="font-bold">Error al cargar publicaciones:</strong>
        <span class="block sm:inline"> No se pudieron cargar tus publicaciones desde el servidor.</span>
      `;
      userPostsContainer.appendChild(errorMessage);
      
      // Crear publicaciÃ³n de ejemplo
      const samplePost = document.createElement('div');
      samplePost.className = 'bg-white border border-gray-200 rounded-lg p-4 mb-4';
      
      const currentUser = await auth.getCurrentUser();
      const userName = currentUser?.name || 'Usuario';
      
      samplePost.innerHTML = `
        <div class="flex items-center mb-3">
          <div class="w-10 h-10 rounded-full bg-gradient-to-br from-purple-400 to-indigo-400 flex items-center justify-center mr-3">
            <svg class="h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
          </div>
        <div>
            <p class="font-semibold">${userName}</p>
            <p class="text-xs text-gray-500">Ejemplo de publicaciÃ³n</p>
          </div>
        </div>
        <p class="mb-3">Esta es una publicaciÃ³n de ejemplo porque no se pudieron cargar tus publicaciones reales desde el servidor.</p>
        <div class="flex items-center justify-between text-sm text-gray-500 pt-2 border-t border-gray-100">
          <div class="flex items-center">
            <button class="flex items-center mr-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
              0 Me gusta
        </button>
            <span class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
          </svg>
              0 Comentarios
            </span>
          </div>
      </div>
    `;
    
      userPostsContainer.appendChild(samplePost);
    }
  };

  // Agregar evento para crear nueva publicaciÃ³n
  document.getElementById('createPostBtn')?.addEventListener('click', async () => {
    const contentInput = document.getElementById('newPostContent') as HTMLTextAreaElement;
    if (!contentInput || !contentInput.value.trim()) return;
    
    try {
      const newPost = await posts.create({ content: contentInput.value });
      contentInput.value = '';
      
      // Recargar los posts
      loadUserPosts();
    } catch (error) {
      console.error('Error al crear publicaciÃ³n:', error);
      alert('No se pudo crear la publicaciÃ³n');
    }
  });

  // Cerrar sesiÃ³n
  logoutBtn?.addEventListener('click', () => {
    auth.logout();
    window.location.href = '/';
  });

  // Cargar datos al iniciar
  console.log('Iniciando carga de datos...');
  loadUserData();
  loadUserStats();
  loadUserPosts();
</script> 